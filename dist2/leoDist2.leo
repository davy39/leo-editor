<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<?xml-stylesheet ekr_test?>
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="ekr.20141117135127.2"><vh>@settings</vh>
<v t="davy.20141213005428.5" a="E"><vh>Distribution settings</vh>
<v t="davy.20141213005428.6"><vh>RPM</vh>
<v t="davy.20141212173600.3"><vh>@data bdist_rpm</vh></v>
</v>
<v t="davy.20141213005428.10"><vh>GIT</vh>
<v t="davy.20141213005428.11"><vh>@string commiter = Cottet Davy &lt;cottet_davy@yahoo.fr</vh></v>
<v t="davy.20141213005428.16"><vh>@string branch = master</vh></v>
<v t="davy.20141213005428.12"><vh>@string remote = git+ssh://git@github.com/davy39/leo-editor</vh></v>
<v t="davy.20141213005428.14"><vh>@string repo = ../</vh></v>
<v t="davy.20141213005428.13"><vh>\@remote = git+ssh://git@github.com/leo-editor/leo-editor</vh></v>
</v>
<v t="davy.20141223204341.28"><vh>PyPi</vh></v>
</v>
</v>
<v t="davy.20141211223335.2"><vh>Shortcut clones</vh>
<v t="davy.20141211223335.5"><vh>&lt;&lt; version &gt;&gt;</vh></v>
<v t="davy.20141213005428.665"><vh>All How To</vh>
<v t="davy.20141213005428.534"><vh>Setuptools HowTo</vh>
<v t="davy.20141213005428.535"><vh>Basics</vh></v>
<v t="davy.20141213005428.536"><vh>Select files to be installed</vh></v>
<v t="davy.20141213005428.537"><vh>Use setup.py for distribution</vh></v>
</v>
<v t="davy.20141213005428.676"><vh>Github HowTo</vh>
<v t="davy.20141217105903.4" a="E"><vh>Work on progress : plugin leoGit.py with Dulwich</vh>
<v t="davy.20141223204341.2"><vh>leoGit.py</vh>
<v t="davy.20141223204341.3"><vh>&lt;&lt; docstring &gt;&gt;</vh></v>
<v t="davy.20141223204341.4"><vh>&lt;&lt; import &gt;&gt;</vh></v>
<v t="davy.20141223204341.5"><vh>&lt;&lt; params &gt;&gt;</vh></v>
<v t="davy.20141223204341.6"><vh>class LeoGit</vh>
<v t="davy.20141223204341.7"><vh>createCommands</vh>
<v t="davy.20141223204341.8"><vh>init</vh></v>
<v t="davy.20141223204341.9"><vh>open-repo</vh></v>
<v t="davy.20141223204341.10"><vh>clone</vh></v>
<v t="davy.20141223204341.11"><vh>add</vh></v>
<v t="davy.20141223204341.12"><vh>rm</vh></v>
<v t="davy.20141223204341.13"><vh>pull</vh></v>
<v t="davy.20141223204341.14"><vh>push</vh></v>
<v t="davy.20141223204341.15"><vh>tag</vh></v>
<v t="davy.20141223204341.16"><vh>archive</vh></v>
<v t="davy.20141223204341.17"><vh>symb_ref</vh></v>
<v t="davy.20141223204341.18"><vh>reset</vh></v>
<v t="davy.20141223204341.19"><vh>commit</vh></v>
<v t="davy.20141223204341.20"><vh>commit_tree</vh></v>
<v t="davy.20141223204341.21"><vh>log</vh></v>
<v t="davy.20141223204341.22"><vh>newHeadline</vh></v>
</v>
<v t="davy.20141223204341.23"><vh>Menus</vh></v>
</v>
<v t="davy.20141223204341.24" a="E"><vh>Helpers</vh>
<v t="davy.20141223204341.25"><vh>class FileDialog</vh></v>
</v>
</v>
</v>
<v t="davy.20141217105903.9"><vh>Using Github API</vh></v>
<v t="davy.20141217105903.5"><vh>Release on Github</vh></v>
</v>
<v t="davy.20141213005428.193"><vh>PyPi HowTo</vh></v>
<v t="davy.20141213005428.639"><vh>Windows HowTo</vh>
<v t="davy.20141213005428.73" a="E"><vh>About nsis</vh>
<v t="davy.20141213005428.74"><vh>nsis script</vh></v>
<v t="davy.20141213005428.75"><vh>Links</vh>
<v t="davy.20141213005428.76"><vh>@url nsi new ui readme</vh></v>
<v t="davy.20141213005428.77"><vh>@url about pages</vh></v>
<v t="davy.20141213005428.78"><vh>@url nsDialogs</vh></v>
</v>
<v t="davy.20141213005428.79"><vh>Compile nsis on Linux</vh></v>
<v t="davy.20141213005428.80"><vh>Compile nsis on Windows</vh></v>
</v>
</v>
<v t="davy.20141213005428.677"><vh>RPM HowTo</vh></v>
<v t="davy.20141213005428.340"><vh>Debian HowTo</vh>
<v t="davy.20141213005428.341"><vh>dpkg</vh></v>
<v t="davy.20141213005428.342"><vh>Sources packages</vh></v>
<v t="davy.20141213005428.343"><vh>Set up a PPA on launchpad (Ubuntu)</vh>
<v t="davy.20141213005428.344"><vh>Create a launchpad account</vh></v>
<v t="davy.20141213005428.345"><vh>Generate GPG key</vh></v>
<v t="davy.20141213005428.346"><vh>Set you GPG uid as default one</vh></v>
<v t="davy.20141213005428.347"><vh>Add your key to ubuntu server</vh></v>
<v t="davy.20141213005428.348"><vh>Add your key to your launchpad account</vh></v>
<v t="davy.20141213005428.349"><vh>Sign the code of conduct</vh></v>
<v t="davy.20141213005428.350"><vh>Activate a Personal Pakage Archive</vh></v>
</v>
<v t="davy.20141213005428.351"><vh>Upload to PPA</vh></v>
</v>
<v t="davy.20141213005428.678"><vh>Fink HowTo</vh></v>
<v t="davy.20141223204341.27"><vh>HomeBrew HowTo</vh></v>
</v>
<v t="davy.20141213005428.660"><vh>All files</vh>
<v t="ekr.20130809141000.1990"><vh>@asis ../INSTALL.TXT</vh>
<v t="ekr.20130809141000.1991"><vh>System requirements</vh></v>
<v t="ekr.20130809141000.1992"><vh>Leo's HOME directory</vh></v>
<v t="ekr.20130809141000.1993"><vh>Linux installation</vh></v>
<v t="ekr.20130809141000.1994"><vh>Windows installation</vh></v>
<v t="ekr.20130809141000.1995"><vh>Running Leo</vh></v>
<v t="ekr.20130809141000.1996"><vh>Creating file associations</vh></v>
<v t="ekr.20130809141000.1997"><vh>Adding Leo to your path</vh></v>
<v t="ekr.20130809141000.1998"><vh>Running Leo for the first time</vh></v>
</v>
<v t="EKR.20040519090846.1"><vh>@asis ../LICENSE.TXT</vh>
<v t="davy.20141211223335.6"><vh>&lt;&lt; license&gt;&gt;</vh></v>
</v>
<v t="EKR.20040519090846.9"><vh>@asis ../README.TXT</vh>
<v t="davy.20141211223335.3"><vh>&lt;&lt; links &gt;&gt;</vh></v>
</v>
<v t="ekr.20141016105045.2119"><vh>@asis ../.gitattributes</vh></v>
<v t="davy.20141213005428.538"><vh>@nosent ../setup.py</vh>
<v t="davy.20141213005428.539"><vh>Parameters</vh>
<v t="davy.20141213005428.540"><vh>Metadata</vh>
<v t="davy.20141213005428.541"><vh>&lt;&lt; name &gt;&gt;</vh></v>
<v t="davy.20141213005428.542"><vh>&lt;&lt; version &gt;&gt;</vh></v>
<v t="davy.20141213005428.543"><vh>&lt;&lt; author &gt;&gt;</vh></v>
<v t="davy.20141213005428.544"><vh>&lt;&lt; author_email &gt;&gt;</vh></v>
<v t="davy.20141213005428.545"><vh>&lt;&lt; url &gt;&gt;</vh></v>
<v t="davy.20141213005428.546"><vh>&lt;&lt; download_url &gt;&gt;</vh></v>
<v t="davy.20141213005428.547"><vh>&lt;&lt; bugtrack_url &gt;&gt;</vh></v>
<v t="davy.20141213005428.548"><vh>&lt;&lt; license &gt;&gt;</vh></v>
<v t="davy.20141213005428.549"><vh>&lt;&lt; description &gt;&gt;</vh></v>
<v t="davy.20141213005428.550"><vh>&lt;&lt; long_description &gt;&gt;</vh></v>
<v t="davy.20141213005428.551"><vh>&lt;&lt; platforms &gt;&gt;</vh></v>
<v t="davy.20141213005428.552"><vh>&lt;&lt; classifiers &gt;&gt;</vh></v>
</v>
<v t="davy.20141213005428.553"><vh>Installation configuration</vh>
<v t="davy.20141213005428.554"><vh>&lt;&lt; requires &gt;&gt;</vh></v>
<v t="davy.20141213005428.555"><vh>&lt;&lt; entry_points &gt;&gt;</vh></v>
<v t="davy.20141213005428.556"><vh>&lt;&lt; packages &gt;&gt;</vh></v>
<v t="davy.20141213005428.557"><vh>&lt;&lt; package_data &gt;&gt;</vh></v>
<v t="davy.20141213005428.558"><vh>&lt;&lt; exclude_package_data &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="davy.20141213005428.559"><vh>@file ../setup.cfg</vh></v>
<v t="davy.20141213005428.560"><vh>@auto ../MANIFEST.in</vh></v>
<v t="davy.20141213005428.194"><vh>@file ~/pypirc</vh></v>
<v t="davy.20141213005428.81"><vh>@file windows/leo.nsi</vh></v>
<v t="davy.20141213005428.352"><vh>@path debian</vh>
<v t="davy.20141213005428.353"><vh>@nosent changelog</vh></v>
<v t="davy.20141213005428.354"><vh>Statics</vh>
<v t="davy.20141213005428.355"><vh>@nosent rules</vh></v>
<v t="davy.20141213005428.356"><vh>@nosent control</vh>
<v t="davy.20141213005428.357"><vh>&lt;&lt; description &gt;&gt;</vh></v>
<v t="davy.20141213005428.358"><vh>&lt;&lt; links &gt;&gt;</vh></v>
</v>
<v t="davy.20141213005428.388"><vh>@nosent copyright</vh></v>
<v t="davy.20141213005428.360"><vh>@nosent launcher/leo</vh></v>
<v t="davy.20141213005428.378"><vh>@nosent patches/01_remove_entry_points_and_script.patch</vh></v>
<v t="davy.20141213005428.379"><vh>@nosent patches/series</vh></v>
<v t="davy.20141213005428.383"><vh>@nosent source/options</vh></v>
<v t="davy.20141213005428.382"><vh>@nosent source/format</vh></v>
<v t="davy.20141213005428.381"><vh>@nosent source/include-binaries</vh></v>
<v t="davy.20141213005428.366"><vh>@nosent leo.desktop</vh></v>
<v t="davy.20141213005428.387"><vh>@nosent compat</vh></v>
<v t="davy.20141213005428.391"><vh>@nosent watch</vh></v>
<v t="davy.20141213005428.369"><vh>@nosent install</vh></v>
<v t="davy.20141213005428.392"><vh>@image leo.png</vh></v>
<v t="davy.20141213005428.371"><vh>@nosent leo.mime</vh></v>
<v t="davy.20141213005428.372"><vh>@nosent leo.sharedmimeinfo</vh></v>
</v>
</v>
<v t="davy.20141213005428.500"><vh>@path mac/fink</vh>
<v t="davy.20141213005428.501"><vh>@nosent patches/01_remove_entry_points_and_script.patch</vh></v>
<v t="davy.20141213005428.502"><vh>@nosent patches/series</vh></v>
<v t="davy.20141213005428.503"><vh>@nosent launcher/leo</vh></v>
<v t="davy.20141213005428.504"><vh>@nosent source/include-binaries</vh></v>
<v t="davy.20141213005428.505"><vh>@nosent source/format</vh></v>
<v t="davy.20141213005428.506"><vh>@nosent source/options</vh></v>
<v t="davy.20141213005428.507"><vh>@nosent changelog</vh></v>
<v t="davy.20141213005428.508"><vh>@nosent install</vh></v>
<v t="davy.20141213005428.509"><vh>@nosent rules</vh></v>
<v t="davy.20141213005428.510"><vh>@nosent compat</vh></v>
<v t="davy.20141213005428.511"><vh>@nosent copyright</vh></v>
<v t="davy.20141213005428.512"><vh>@nosent control</vh></v>
<v t="davy.20141213005428.513"><vh>@nosent package.info</vh></v>
<v t="davy.20141213005428.514"><vh>@nosent watch</vh></v>
<v t="davy.20141213005428.515"><vh>@image leo.png</vh></v>
</v>
</v>
<v t="davy.20141202180209.89"><vh>All commands</vh>
<v t="davy.20141213005428.18"><vh>@command add-commit-push</vh></v>
<v t="davy.20141202180209.141"><vh>@command make nsis</vh>
<v t="davy.20141202180209.87"><vh>&lt;&lt; version &gt;&gt;</vh></v>
<v t="davy.20141202180209.85"><vh>&lt;&lt; includes &gt;&gt;</vh></v>
<v t="davy.20141202180209.86"><vh>&lt;&lt; pathes &gt;&gt;</vh></v>
<v t="davy.20141202180209.145"><vh>makeWindowsArchiveDir</vh></v>
<v t="davy.20141202180209.146"><vh>copyLeoNsi</vh></v>
<v t="davy.20141202180209.147"><vh>copyExtraFiles</vh></v>
<v t="davy.20141202180209.148"><vh>makeExe</vh></v>
</v>
<v t="davy.20141202180209.65"><vh>@command make src</vh>
<v t="davy.20141202180209.87"></v>
<v t="davy.20141202180209.85"></v>
<v t="davy.20141202180209.86"></v>
<v t="davy.20141202180209.78"><vh>makeSdist</vh></v>
<v t="davy.20141202180209.79"><vh>extractSdist</vh></v>
<v t="davy.20141202180209.80"><vh>debianizeTarballName</vh></v>
<v t="davy.20141202180209.81"><vh>copyDebianDir</vh></v>
<v t="davy.20141202180209.73"><vh>makeDebianSrc</vh></v>
</v>
<v t="davy.20141202180209.84"><vh>@command upload to ppa</vh>
<v t="davy.20141202180209.85"></v>
<v t="davy.20141202180209.86"></v>
<v t="davy.20141202180209.87"></v>
</v>
<v t="davy.20141202180209.88"><vh>@command multi series</vh></v>
<v t="davy.20141202180209.114"><vh>@command make-fink</vh>
<v t="davy.20141202180209.87"></v>
<v t="davy.20141202180209.85"></v>
<v t="davy.20141202180209.86"></v>
<v t="davy.20141202180209.78"></v>
<v t="davy.20141202180209.79"></v>
<v t="davy.20141202180209.80"></v>
<v t="davy.20141202180209.121"><vh>copyFinkDir</vh></v>
<v t="davy.20141202180209.122"><vh>makeFinkDeb</vh></v>
</v>
<v t="davy.20141202180209.74"><vh>@command make deb</vh>
<v t="davy.20141202180209.87"></v>
<v t="davy.20141202180209.85"></v>
<v t="davy.20141202180209.86"></v>
<v t="davy.20141202180209.78"></v>
<v t="davy.20141202180209.79"></v>
<v t="davy.20141202180209.80"></v>
<v t="davy.20141202180209.81"></v>
<v t="davy.20141202180209.82"><vh>makeDebianDeb</vh></v>
</v>
<v t="davy.20141202180209.124"><vh>@command make RPM</vh>
<v t="davy.20141202180209.87"></v>
<v t="davy.20141202180209.85"></v>
<v t="davy.20141202180209.86"></v>
<v t="davy.20141202180209.128"><vh>alienConvert</vh></v>
</v>
</v>
<v t="davy.20141211223335.4"><vh>&lt;&lt; short description &gt;&gt;</vh></v>
<v t="davy.20141211223335.3"></v>
<v t="davy.20141211223335.6"></v>
<v t="davy.20141202180209.46"><vh>@nosent changelog</vh></v>
</v>
<v t="ekr.20070325123540"><vh>@chapters</vh>
<v t="davy.20141202180209.3"><vh>@chapter Global</vh>
<v t="davy.20141217105903.15"><vh>Global HowTo</vh>
<v t="ekr.20100202061222.1494"><vh>Distribution checklist</vh></v>
</v>
<v t="davy.20141217105903.16"><vh>Global Files</vh>
<v t="EKR.20040519090846.1"></v>
<v t="EKR.20040519090846.9"></v>
<v t="ekr.20130809141000.1990"></v>
</v>
</v>
<v t="davy.20141213005428.640"><vh>@chapter Setuptools</vh>
<v t="davy.20141213005428.534"></v>
<v t="davy.20141213005428.533"><vh>Files</vh>
<v t="davy.20141213005428.538"></v>
<v t="davy.20141213005428.559"></v>
<v t="davy.20141213005428.560"></v>
</v>
<v t="davy.20141213005428.667"><vh>@command make src</vh>
<v t="davy.20141213005428.668"><vh>&lt;&lt; version &gt;&gt;</vh></v>
<v t="davy.20141213005428.669"><vh>&lt;&lt; includes &gt;&gt;</vh></v>
<v t="davy.20141213005428.670"><vh>&lt;&lt; pathes &gt;&gt;</vh></v>
<v t="davy.20141213005428.671"><vh>makeSdist</vh></v>
<v t="davy.20141213005428.672"><vh>extractSdist</vh></v>
<v t="davy.20141213005428.673"><vh>debianizeTarballName</vh></v>
<v t="davy.20141213005428.674"><vh>copyDebianDir</vh></v>
<v t="davy.20141213005428.675"><vh>makeDebianSrc</vh></v>
</v>
</v>
<v t="davy.20141213005428.23"><vh>@chapter Github</vh>
<v t="davy.20141213005428.676"></v>
<v t="davy.20141217105903.10"><vh>Github commands</vh>
<v t="davy.20141217092242.5"><vh>@command git-tag</vh>
<v t="davy.20141211223335.5"></v>
</v>
<v t="davy.20141217105903.6"><vh>@command git-commit</vh></v>
<v t="davy.20141217105903.7"><vh>@command github-create-release</vh></v>
<v t="davy.20141217105903.8"><vh>@command github-upload-asset</vh></v>
<v t="davy.20141213005428.18"></v>
</v>
<v t="davy.20141213005428.662"><vh>Github Files</vh>
<v t="ekr.20141016105045.2119"></v>
</v>
<v t="davy.20141217092242.2"><vh>newHeadline</vh></v>
</v>
<v t="davy.20141213005428.22"><vh>@chapter PyPi</vh>
<v t="davy.20141213005428.193"></v>
<v t="davy.20141213005428.194"></v>
</v>
<v t="davy.20141213005428.19"><vh>@chapter Windows</vh>
<v t="davy.20141213005428.639"></v>
<v t="davy.20141213005428.81"></v>
<v t="davy.20141202180209.141"></v>
</v>
<v t="davy.20141213005428.21"><vh>@chapter Linux</vh>
<v t="davy.20141213005428.373"><vh>RPM</vh>
<v t="davy.20141213005428.677"></v>
<v t="davy.20141217105903.11"><vh>RPM Files</vh>
<v t="davy.20141213005428.374"><vh>&lt;&lt; bdist_rpm &gt;&gt;</vh></v>
</v>
<v t="davy.20141217105903.12"><vh>RPM Commands</vh>
<v t="davy.20141202180209.124"></v>
</v>
</v>
<v t="davy.20141213005428.339"><vh>Debian/Ubuntu</vh>
<v t="davy.20141213005428.340"></v>
<v t="davy.20141217105903.13"><vh>Debian Files</vh>
<v t="davy.20141213005428.352"></v>
</v>
<v t="davy.20141217105903.14"><vh>Debian Commands</vh>
<v t="davy.20141202180209.84"></v>
<v t="davy.20141202180209.88"></v>
<v t="davy.20141202180209.74"></v>
<v t="davy.20141202180209.65"></v>
</v>
</v>
</v>
<v t="davy.20141213005428.20"><vh>@chapter Mac</vh>
<v t="davy.20141213005428.499"><vh>Fink</vh>
<v t="davy.20141213005428.678"></v>
<v t="davy.20141213005428.500"></v>
<v t="davy.20141202180209.114"></v>
</v>
<v t="davy.20141213005428.498" a="E"><vh>Homebrew</vh>
<v t="davy.20141223204341.27"></v>
</v>
</v>
<v t="EKR.20040519091259"><vh>@chapter Announcements</vh>
<v t="EKR.20040519091259.1"><vh>Download statistics</vh></v>
<v t="ekr.20101115090518.1494"><vh>Leo 4.8 final</vh></v>
<v t="ekr.20110603112852.1505"><vh>Leo 4.9 final</vh></v>
<v t="ekr.20120328150744.1791"><vh>Leo 4.10 final</vh></v>
<v t="ekr.20131105110107.16636"><vh>Leo 4.11 final</vh></v>
<v t="ekr.20141105082156.2"><vh>Leo 5.0 final</vh></v>
<v t="EKR.20040519091259.2"><vh>Quotes of the month</vh>
<v t="ekr.20080901114425.2"><vh>Sept 2008</vh></v>
<v t="ekr.20070425092712"><vh>April 2007</vh></v>
<v t="ekr.20070101093904"><vh>January 2007</vh></v>
<v t="ekr.20060823090437"><vh>August 2006</vh></v>
<v t="ekr.20060213160806"><vh>February 2005</vh></v>
<v t="ekr.20040828084148"><vh>August 2004</vh></v>
<v t="ekr.20040630210818"><vh>July 2004</vh></v>
<v t="EKR.20040519091259.3"><vh>November 2003</vh></v>
<v t="EKR.20040519091259.4"><vh>October 2003</vh></v>
</v>
</v>
</v>
<v t="davy.20141223204341.33"><vh>@persistence</vh>
<v t="davy.20141223204341.34"><vh>@data:@auto ../MANIFEST.in</vh>
<v t="davy.20141223204341.36"><vh>@gnxs</vh></v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="EKR.20040519090846.1">&lt;&lt; license&gt;&gt;</t>
<t tx="EKR.20040519090846.9">Leo 5.0 final                       November 24, 2014

Leo 5.0-final is now available at:
http://sourceforge.net/projects/leo/files/Leo/

This release fixes several installation issues
and updates installation instructions for Linux/Ubuntu.

Leo is a PIM, an IDE and an outliner.
Video tutorials: http://leoeditor.com/screencasts.html
Text tutorials: http://leoeditor.com/tutorial.html

The highlights of Leo 5.0
--------------------------

* Better compatibility with vim, Emacs, pylint and PyQt:
    - Optional native emulation of vim commands.
    - Full support for Emacs org-mode outlines.
    - Full support for Vim .otl outlines.
    - Better support for pylint.
    - Support for both PyQt4 and PyQt5.
* Smoother installation:
    - Support for brew install leo on MacOS.
    - 'python setup.py install' now works.
    - pip install leo now works.
    - Leo is now a debian package.
* Better handling of nodes containing large text:
    - Idle time syntax coloring eliminates delay.
    - Optional delayed loading of large text.
* Power features:
    - Command history for minibuffer commands.
    - Leo available via github repository.
    - File name completion.
    - Cloned nodes expand and contract independently.
    - @data nodes can be composed from descendant nodes.
    - No need to change Leo's main style sheet:
      it can be customized with @color and @font settings.
    - @persistence nodes save data in @auto trees.
    - A pluggable architecture for @auto nodes.
    - The style-reload command changes Leo's appearance instantly.
* Important new plugins for tagging, display and node evaluation.
* For beginners:
    - Leo's default workbook files contains Leo's quickstart guide.
* Hundreds of new/improved features and bug fixes.

Links:
------
&lt;&lt; links &gt;&gt;
</t>
<t tx="EKR.20040519091259">@pagewidth 70

@language rest
</t>
<t tx="EKR.20040519091259.1">4.4.5       setup: 547  zip: 379  2007-12-11
4.4.4       setup: 856  zip: 539  2007-11-02
4.4.3.1     setup: 1092 zip: 743  2007-7-03
4.4.3       setup: 363  zip: 282  2007-6-26
4.4.2.1     setup: 2847 zip: 2044 2006-10-19
4.4.1.1     setup: 1041 zip: 813  2006-9-3
4.4         setup: 1318 zip: 1075 2006-5-11
3.3.3       setup: 1503 zip: 1145 2005-9-19
4.3.2 final setup: 409  zip: 222
4.3.1 final setup: 2168 zip: 1781
4.3 final   setup: 942  zip: 686
4.2.1 final setup: 413  zip: 490
4.2-final   setup: 1828 zip: 1508
4.2b3       setup: 563, zip: 338
4.1rc3      setup: 870  zip: 630
4.1 b5      setup: 195, zip: 128
4.0.4       setup: 340, zip: 385
4.0                     zip: 382
3.12        setup: 953  zip: 592
3.11                    zip: 102
3.10                    zip: 1193</t>
<t tx="EKR.20040519091259.2"></t>
<t tx="EKR.20040519091259.3">I like Leo more the more I use it...It's an unexpected pleasure to
see my (linearly written) code outlined in Leo. I can't wait to use
Leo to start a new project, going from outline to code...Thanks again
for providing the computing community with such a fine piece of
software. -- Jim Shapiro, Ph.D.

If you think you have used all possible programmer's editors, but
have not yet tried Leo, you are wrong...I rate Leo as a "must have"
for Python programmers. The code makes for a good read.
-- John Tobler  http://weblogs.asp.net/Jtobler/
</t>
<t tx="EKR.20040519091259.4">I've written documentation in WordPerfert, Ventura, Word, PageMaker, and
FrameMaker and even though they create wonderfully looking and useful
documents, they've never been able to do what I've been looking for. HTML,
compiled help files, and later PDF came closer, but still not there. I think
I've found it in LEO, a way to make a "living" document. A document built out
of discrete parts that can be re-organized on the fly to meet the needs of a
varying audience...Being a convert for less than a day I've still got a lot to
learn, but just the possibility of keeping system maintenance scripts in the IT
manual is mind boggling.  -- David Nichols dnichols@amci.com</t>
<t tx="davy.20141202180209.114">'''
* Generate a source tarball with a debianized name and extract it.
 
* Copy dist/fink folder to the archive/src/debian folder 
    
* Generate fink .deb package
'''
@language python
&lt;&lt; version &gt;&gt;
&lt;&lt; includes &gt;&gt;
&lt;&lt; pathes &gt;&gt;
@others

g.es_print('Generate Tarball...')
makeSdist()
g.es_print('Extract Tarball...')
extractSdist()
g.es_print('Rename Tarball...')
debianizeTarballName()
g.es_print('Copy Fink directory...')
copyFinkDir()
g.es_print('Make Fink .deb package...')
makeFinkDeb()
g.es_print('Done')
</t>
<t tx="davy.20141202180209.121">def copyFinkDir():
    """Copy fink folder to the srcDir/debian"""
    g.execute_shell_commands('cp -R '+finkDir+' '+srcDir+'/debian',trace=True)</t>
<t tx="davy.20141202180209.122">def makeFinkDeb():
    """Generate Debian sources"""
    os.chdir(srcDir)
    g.execute_shell_commands('dpkg-buildpackage -b',trace=True)</t>
<t tx="davy.20141202180209.124">@language python
'''
* Use alien to convert .deb package to .rpm

''' 
&lt;&lt; version &gt;&gt;
&lt;&lt; includes &gt;&gt;
&lt;&lt; pathes &gt;&gt;

@others

alienConvert()</t>
<t tx="davy.20141202180209.128">def alienConvert():
    """Convert .deb to rpm"""
    os.chdir(archiveDir)
    if exists(debPackage):
        g.es('Convert .deb to rpm...')
        g.execute_shell_commands('fakeroot alien -k -r '+debPackage)
        g.es('Done')
    else:
        g.es('Debian package does not exist.',color='red')
        g.es('Please run make-deb and try again.',color='red')
    </t>
<t tx="davy.20141202180209.141">'''
* Generate a source tarball and extract it into archive folder
 
* Copy nsis file to source folder

* Generate SetupLeo.exe from nsis file
'''
@language python
&lt;&lt; version &gt;&gt;
&lt;&lt; includes &gt;&gt;
&lt;&lt; pathes &gt;&gt;

@others

g.es_print('Generate windows folder...')
makeWindowsArchiveDir()
g.es_print('Copy leo.nsi')
copyLeoNsi()
g.es('Copy launchLeo.py, README.TXT &amp; LICENSE.TXT...')
copyExtraFiles()
g.es_print('Make Windows executable...')
makeExe()
g.es_print('Done')</t>
<t tx="davy.20141202180209.145">def makeWindowsArchiveDir():
    """Run setup.py build to extract files to be installed"""
    os.chdir(rootDir)
    if exists(windowsArchiveDir):
        g.execute_shell_commands('rm -R '+windowsArchiveDir)
    elif not exists(archiveDir):
        g.execute_shell_commands('mkdir '+archiveDir)
    g.execute_shell_commands('python setup.py build --build-lib '+windowsArchiveDir)</t>
<t tx="davy.20141202180209.146">def copyLeoNsi():
    """Copy leo.nsi from dist/windows folder to srcDir"""
    g.execute_shell_commands('cp '+ nsiFile +' '+ windowsArchiveDir) </t>
<t tx="davy.20141202180209.147">def copyExtraFiles():
    """Copy extra files to windowsArchiveDir"""
    extrafiles = ['launchLeo.py', 'README.TXT','LICENSE.TXT']
    for extrafile in extrafiles:
       g.execute_shell_commands('cp '+join(rootDir,extrafile)+' '+windowsArchiveDir) </t>
<t tx="davy.20141202180209.148">def makeExe():
    """Make windows executable with makensis"""
    os.chdir(windowsArchiveDir)
    g.execute_shell_commands('makensis leo.nsi')</t>
<t tx="davy.20141202180209.3"></t>
<t tx="davy.20141202180209.46">leo (5.0.1-1) lucid; urgency=low

  * Fix a stupid mime copy-paste error
  
  * Fix launchers

 -- Cottet Davy (Davy39) &lt;cottet_davy@yahoo.fr&gt;  Fri, 25 Nov 2014 11:53:27 +0800



leo (5.0) lucid; urgency=low

  * First attempt to build a debian package

 -- Cottet Davy (Davy39) &lt;cottet_davy@yahoo.fr&gt;  Fri, 25 Nov 2014 00:53:27 +0800
</t>
<t tx="davy.20141202180209.65">@language python
'''
* Generate a source tarball with a debianized name and extract it into dist folder

* Copy dist/debian folder to archive/src folder 
 
* Generate debian source packages &amp; files

''' 
&lt;&lt; version &gt;&gt;
&lt;&lt; includes &gt;&gt;
&lt;&lt; pathes &gt;&gt;

@others

g.es_print('Generate Tarball...')
makeSdist()
g.es_print('Extract Tarball...')
extractSdist()
g.es_print('Rename Tarball...')
debianizeTarballName()
g.es_print('Copy Debian directory...')
copyDebianDir()
g.es_print('Make Debian sources...')
makeDebianSrc()
g.es_print('Done')</t>
<t tx="davy.20141202180209.73">def makeDebianSrc():
    """
    * Generate Debian sources
    """
    os.chdir(srcDir)
    g.execute_shell_commands('dpkg-buildpackage -S',trace=True)</t>
<t tx="davy.20141202180209.74">'''
* Generate a source tarball with a debianized name and extract it.
 
* Copy dist/debian folder to archive/src folder 
    
* Generate debian deb package
'''
@language python
&lt;&lt; version &gt;&gt;
&lt;&lt; includes &gt;&gt;
&lt;&lt; pathes &gt;&gt;
@others

g.es_print('Generate Tarball...')
makeSdist()
g.es_print('Extract Tarball...')
extractSdist()
g.es_print('Rename Tarball...')
debianizeTarballName()
g.es_print('Copy Debian directory...')
copyDebianDir()
g.es_print('Make Debian package...')
makeDebianDeb()
g.es_print('Done')

</t>
<t tx="davy.20141202180209.78">def makeSdist():
    """
    * Remove leo.egg-info folder from last build
    
    * Call setuptool to generate a source tarball
    
    """
    # Go to root directory
    os.chdir(rootDir)
    # Remove leo.egg-info folder from last build
    g.execute_shell_commands('rm -R leo.egg-info',trace=True)
    # Make the sources tarball in archiveDir
    g.execute_shell_commands('python setup.py sdist -d '+archiveDir,trace=True)
    </t>
<t tx="davy.20141202180209.79">def extractSdist():
    "Extract the source tarball into archiveDir"
    # Go to archiveDir
    g.execute_shell_commands('rm -R '+srcDir)
    g.execute_shell_commands('mkdir '+srcDir)
    # Extract it
    g.execute_shell_commands('tar xfz '+rawTarball+' -C '+srcDir+' --strip-components=1')</t>
<t tx="davy.20141202180209.80">def debianizeTarballName():
    """
    Rename archive tarball to be debian compliant ::
        
        leo-5.0b2.tar.gz -&gt; leo_5.0b2.orig.tar.gz
    
    """
    g.execute_shell_commands('cp '+rawTarball+' '+origTarball)</t>
<t tx="davy.20141202180209.81">def copyDebianDir():
    """Copy debian folder to the extracted archive"""
    g.execute_shell_commands('cp -R '+debianDir+' '+srcDir,trace=True)</t>
<t tx="davy.20141202180209.82">def makeDebianDeb():
    """Generate Debian sources"""
    os.chdir(srcDir)
    g.execute_shell_commands('dpkg-buildpackage',trace=True)</t>
<t tx="davy.20141202180209.84">@language python
"""
Upload debian sources to be build on lucid (defined on changelog).
Please, wait for the built to be done before to transfert it to other series.
"""
&lt;&lt; includes &gt;&gt;
&lt;&lt; version &gt;&gt;
&lt;&lt; pathes &gt;&gt;
os.chdir(distDir)
g.execute_shell_commands('dput ppa '+sourceChanges,trace=True)
g.es('Done')</t>
<t tx="davy.20141202180209.85">import leo.core.leoVersion
import os
</t>
<t tx="davy.20141202180209.86">abspath,exists,join,dirname = g.os_path_abspath,g.os_path_exists,g.os_path_join,g.os_path_dirname

# Top directory : leo-editor folder
rootDir	     = abspath(join(dirname(c.fileName()),'..'))
# Leo's dist folder
# Contains necessary files for building distribution
distDir	     = join(rootDir,'dist')
# Directory to build and store distibution packages and source tarball
archiveDir       = abspath(join(rootDir,'..','archive'))
# Path to the source tarball
rawTarball	  = join(archiveDir,'leo-'+version+'.tar.gz')
# Directory where source tarball is extracted in order to build various distrib
srcDir	      = join(archiveDir,'src')
# Debianized source tarball 
origTarball	 = join(archiveDir,'leo_'+version+'.orig.tar.gz')
# Debian leo_5.x.source.changes to upload on launchpad
sourceChanges       = join(archiveDir,'leo_'+version+'-'+debRev+'.source.changes')
# Path to Leo's debian folder
debianDir	   = join(distDir,'debian')
# Path to leo.nsi 
nsiFile = join(distDir,'windows','leo.nsi')
# Path to windowsArchiveDir
windowsArchiveDir = join(archiveDir,'windows')
# Path to fink files
finkDir = join(distDir,'mac','fink')
# Path to Debian .deb package
debPackage       = join(archiveDir,'leo_'+version+'-'+debRev+'_all.deb')
# Path to Fink .deb package
finkPackage       = join(archiveDir,'leo_'+version+'-'+finkRev+'_all.deb')</t>
<t tx="davy.20141202180209.87"># Make sure that it is the same in setup.py, debian/changelog, fink/changelog, leo.nsis, website, doc...
# TODO : implement a reliable global parameter or clone functionality
version = '5.0.1'
debRev = '1'
finkRev = '1'</t>
<t tx="davy.20141202180209.88">@language python
#Name of the ppa and target source name
ppaName='ppa'
sourceName='leo'
version = '5.0-3'

try:
  from launchpadlib.launchpad import Launchpad
except :
  g.es('Error : please install launchpadlib')
  g.es('sudo pip install launchpadlib')

launchpad = Launchpad.login_with('doNoMatter', 'production')

try:
    ppa=launchpad.me.getPPAByName(name=ppaName)
except KeyError:
    g.es("PPA "+ppaName+" not found")

#What is we don't precise a series ?
for to_series_name in ['precise', 'trusty','utopic', 'vivid']:
    g.es('Copy .deb from lucid to '+to_series_name+' ...')
    ppa.syncSource (
	from_archive=ppa,
	include_binaries=True,
	source_name=sourceName,
	to_pocket='Release',
	to_series=to_series_name,
	version=version)
g.es('Done')</t>
<t tx="davy.20141202180209.89"></t>
<t tx="davy.20141211223335.2"></t>
<t tx="davy.20141211223335.3">        Docs:      http://leoeditor.com/leo_toc.html
        Tutorials: http://leoeditor.com/tutorial.html
        Videos:    http://leoeditor.com/screencasts.html
        Forum:     http://groups.google.com/group/leo-editor
        Download:  http://sourceforge.net/projects/leo/files/
        Github:    https://github.com/leo-editor/leo-editor
        Quotes:    http://leoeditor.com/testimonials.html</t>
<t tx="davy.20141211223335.4">Leo is a PIM, IDE and outliner written in 100% pure Python.
Leo features a multi-window outlining editor, Python colorizing,
powerful outline commands and many other things, including 
unlimited Undo/Redo and an integrated Python shell(IDLE) window.
Leo requires Python 2.6 or above. Leo works with Python 3.x</t>
<t tx="davy.20141211223335.5">'5.0-final'</t>
<t tx="davy.20141211223335.6">Leo is Open Software and is distributed under the terms of the MIT
License. The gist of the license is that Leo is absolutely free, even
for commercial use (including resale). There is no GNU-like "copyleft"
restriction. The Open Source Initiative board has voted to certify the
MIT license as Open Source. This license is compatible with the GPL.

Copyright (c) 1997-2014 by Edward K. Ream. All Rights Reserved.

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the names of Leo or Edward K. Ream
not be used in advertising or publicity pertaining to distribution of
the software without specific, written prior permission.

DISCLAIMER OF WARRANTIES

EDWARD K. REAM (REAM) SPECIFICALLY DISCLAIMS ALL WARRANTIES, EXPRESSED
OR IMPLIED, WITH RESPECT TO THIS COMPUTER SOFTWARE, INCLUDING BUT NOT
LIMITED TO IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE. IN NO EVENT SHALL REAM BE LIABLE FOR ANY LOSS OF
PROFIT OR ANY COMMERCIAL DAMAGE, INCLUDING BUT NOT LIMITED TO SPECIAL,
INCIDENTAL, CONSEQUENTIAL OR OTHER DAMAGES.
</t>
<t tx="davy.20141212173600.3">@language python
##################
# TODO : Options for RPM build#
##################
# [bdist_rpm] section of setup.
# base directory for creating built distributions
bdist-base =
 
# Base directory for creating RPMs (defaults to "rpm" under bdist-base; must be specified for RPM 2)
rpm-base =

# directory to put final RPM files in (and .spec files if spec-only)
dist-dir =     

# path to Python interpreter to hard-code in the .spec file (default: "python")
python =            

# hard-code the exact path to the current Python interpreter in the .spec file
fix-python =        

# only regenerate spec file
spec-only =         

# only generate source RPM
source-only =      

# only generate binary RPM
binary-only  =      

# use bzip2 instead of gzip to create source distribution
use-bzip2 =         

# name of the (Linux) distribution to which this RPM  applies (*not* the name of the module distribution!)
distribution-name  =

# package classification [default: "Development/Libraries"]
group =            

# RPM release number
release =           

# RPM serial number
serial =

# RPM "vendor" (eg. "Joe Blow &lt;joe@example.com&gt;") [default: maintainer or author from setup script]
vendor =             

# RPM packager (eg. "Jane Doe &lt;jane@example.net&gt;")[default: vendor]
packager =           

# list of documentation files (space or comma-separated)
doc-files =        

# RPM changelog
changelog =         

# name of icon file
icon =           
   
# capabilities provided by this package
provides =           

# capabilities required by this package
requires =          

# capabilities which conflict with this package
conflicts =         

# capabilities required to build this package
build-requires =     

# capabilities made obsolete by this package
obsoletes =         

# do not automatically calculate dependencies
no-autoreq =         

# don't clean up RPM build directory
keep-temp =    

# clean up RPM build directory [default]
no-keep-temp =       

# compile with RPM_OPT_FLAGS when building from source RPM
use-rpm-opt-flags =  

 # do not pass any RPM CFLAGS to compiler
no-rpm-opt-flags  =

# RPM 3 compatibility mode (default)
rpm3-mode =

# RPM 2 compatibility mode
rpm2-mode  =        

# Specify a script for the PREP phase of RPM building
prep-script =       

# Specify a script for the BUILD phase of RPM building
build-script  =     

# Specify a script for the pre-INSTALL phase of RPM building
pre-install =       

# Specify a script for the INSTALL phase of RPM building
install-script =     

# Specify a script for the post-INSTALL phase of RPM  building
post-install =      

# Specify a script for the pre-UNINSTALL phase of RPM building
pre-uninstall =      

# Specify a script for the post-UNINSTALL phase of RPM building
post-uninstall  =    

#  Specify a script for the CLEAN phase of RPM building
clean-script =     

# Specify a script for the VERIFY phase of the RPM build
verify-script  =     

# Force an architecture onto the RPM build process
force-arch =         

# Run the INSTALL phase of RPM building in quiet mode
quiet =        
</t>
<t tx="davy.20141213005428.10"></t>
<t tx="davy.20141213005428.11"></t>
<t tx="davy.20141213005428.12"></t>
<t tx="davy.20141213005428.13"></t>
<t tx="davy.20141213005428.14"></t>
<t tx="davy.20141213005428.16"></t>
<t tx="davy.20141213005428.18">@language python
"""Commit files on git repos"""
from dulwich.porcelain import  add, commit, push, log
import c.config.getString as get

message = # TODO prompt user
committer = author = get('committer')
remote = get('remote')
repos = get('repo')
branch='refs/heads/%s' % (get('branch'))

g.redirectStderr()
g.redirectStdout()

add(repos)
commit(repos, message, author, committer)
push(htmldir, remote, branch)</t>
<t tx="davy.20141213005428.19"></t>
<t tx="davy.20141213005428.193">@language rest
* Checkout tagged release &amp; build package ::

        pushd b:\apps\leo-editor
        git checkout tags/Leo-5.0-final
        python setup.py sdist
        popd

* Install from built package ::

        pip uninstall leo
        pip install  b:\apps\dist\leo-5.0-final.zip

* Verify Leo works as expected ::

        D:\&gt;which leoc
        B:\o4w\apps\Python27\Scripts\leoc.EXE
        D:\&gt;leoc --version
        Leo 5.0-final, build 20141117141110, Mon Nov 17 14:11:10 CST 2014
        D:\&gt;leoc
        ** isPython3: False
        Leo 5.0-final, build 20141117141110, Mon Nov 17 14:11:10 CST 2014
        Not running from a git repo
        Python 2.7.4, PyQt version 4.7.1
        Windows 7 AMD64 (build 6.1.7601) SP1
        leoID=maphew (in C:\Users\mhwilkie\dropbox\.leo)
        reading settings in B:\o4w\apps\Python27\lib\site-packages\leo\config\leoSettings.leo
        reading settings in C:\Users\mhwilkie\dropbox\.leo\myLeoSettings.leo
        reading settings in C:\Users\mhwilkie\dropbox\.leo\workbook.leo
        ...snip...
        wrote recent file: C:\Users\mhwilkie\dropbox\.leo\.leoRecentFiles.txt

* Rebuild package and upload ::

        pushd b:\apps\leo-editor
        python setup.py sdist upload
        popd

* Inspect public page for problems ::

        start https://pypi.python.org/pypi/leo

* Verbosely install from pypi.org ::

        pip uninstall leo
        pip -v install -pre leo

* Repeat verify run leo works



&gt; python setup.py sdist upload

This is the tricky part, there's a bunch of prep-work that's hidden,
involving getting a properly formatted ~/.pypirc. It looks very
straightforward, according to docs, but in practice I've found devilishly
difficult. There are bugs lurking in distutils/setuptools/something. I've
had my .pypirc mangled by "register" and had to rebuild manually. Anyway:

* Step 1 ::

        python setup.py register

    Answer wizard steps, you'll need your pypi user and pass handy.
    
    DO save at end.

* Step 2: manually edit ./pypirc and make sure it resembles below.
DONT use httpS.

* Step 3: the commands in previous message (`python setup.py sdist upload`)


It really is a horrible system. The user and pass are sent in clear text. I
don't know what's taking them so long to use SSH keys or OpenID or..., but
frankly it's to Python's detriment. I hope they get it sorted out sooner
than later.</t>
<t tx="davy.20141213005428.20"></t>
<t tx="davy.20141213005428.21"></t>
<t tx="davy.20141213005428.22"></t>
<t tx="davy.20141213005428.23"></t>
<t tx="davy.20141213005428.339"></t>
<t tx="davy.20141213005428.340"></t>
<t tx="davy.20141213005428.341"></t>
<t tx="davy.20141213005428.342">@language rest
Fundamentals :
--------------

Debian sources, as required by launchpad are the following files :

    * `leo_5.0-1.orig.tar.gz`
    
	Original sources as downloaded from pypi or github. 
    
    * `leo_5.0-1.debian.tar.xz`
	Contain all the magic to build debian package. This is the debian folder I'm actually working on.
    
    * `leo_5.0-1.dsc` and `leo_5.0-1_source.changes`
	Automaticly generated from the 2 other files by `dpkg-buildpackage -S`


.. note::

 * We **need to** name the sources this way : **leo_**&lt;version&gt;**.orig.tar.gz**

 * Basically, the only thing we'll have to change after a new realease is the file debian/changelog
 
	* There is a command line tool do do it : `dch -i`
	
	* every entry **have to** be constructed this way ::

		leo (5.0-1) lucid; urgency=medium
		
		    * Upstream updated from 4.1 to 5.0
		    
		    * Modification of debian/rules to allow multiple installation
		    
		    * Another debian related change....
		
		 -- Your name (your comment) &lt;your email&gt;  Sat, 22 Nov 2014 18:35:35 +0000

	* leo (5.0**-1**) is the way to index diferent releases build with the same source code
	
	* To be accepted by Launchpad, **lucid**" have to be a valid Ubuntu serie. 
	    For debian mainline, we could use `stable` or `unstable`...

	* For `dpkg-buildpackage -S` automaticaly sign the sources with gpg, `Your name (your comment) &lt;your email&gt;` **have to** be exacly identical (including comment, if you gave one)</t>
<t tx="davy.20141213005428.343"></t>
<t tx="davy.20141213005428.344">Apparently you already have one ;)
https://launchpad.net/leo-editor</t>
<t tx="davy.20141213005428.345">Install GnuPG ::

	sudo apt-get install gnupg
	
Generate your personal key ::

	gpg --gen-key

Accept all the default options. 
Enter your **name** (eventually nickname or project name in comment) and **email**.  

Enter a pass sentence (and never forget it !).

Generate random by playing with your keyboard, mouse, openning windows... It take a while don't worry.

Then your key is generated :

    gpg: key (239F254) marked as ultimately trusted
    public and secret key created and signed.
    
    gpg: checking the trustdb
    gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
    gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u
    pub   2048R/239F254 2014-11-22
	  Key fingerprint = A8D3 396D 83B3 F054 4165  638A A9EF C8AD 8538 F859
    uid		  Your Name (leo-editor) &lt;your_email@leo.org&gt;
    sub   2048R/239F254  2014-11-22

..note ::

    This are the information we'll need later : **key**, **fingerprint** and **uid**

</t>
<t tx="davy.20141213005428.346">To be able to sign automaticaly your builds (dpkg-buildpackage -S), you need to set your GPG key as the defaut one.


* Edit your `~/.bashrc` file and add something like the following in there::

	export DEBFULLNAME="&lt;your name&gt;"
	export DEBEMAIL="&lt;your email&gt;"
    
* Then save the file and afterwards simply restart your terminal or run:

	source ~/.bashrc</t>
<t tx="davy.20141213005428.347">register your key to ubuntu server ::

	gpg --keyserver keyserver.ubuntu.com --send-keys 239F254</t>
<t tx="davy.20141213005428.348">* Log in to your personal page on launchpad : https://login.launchpad.net/

* You'll see a link to add or edit your gpg keys : https://launchpad.net/~leo-editor/+editpgpkeys
 
* You'll be ask for your **fingerprint** : A8D3 396D 83B3 F054 4165  638A A9EF C8AD 8538 F859 

    A message has been sent to your_email@leo.org, encrypted with the key 2048R/239F254. To confirm the key is yours, decrypt the message and follow the link inside. 

* An encypted email has been sent to you. If your email software does't deal with encrypted emails just paste the content inside this ::

	    echo "&lt;content of email&gt;" | gpg -d

    This way ::
    
	    echo "-----BEGIN PGP MESSAGE-----
	    Version: GnuPG v1.4.11 (GNU/Linux)
	    
	    hQEMA/i5GP5my2SxAQf+Nco7tO6Idd2GRUlryGANbSwZRF0hqDCVzH29rfpnfpNl
	    42BF4lwZiBCqjtPq9Xq/1LvXwzoxZ82a4FBMxRGzV4mAwzEOahDmY134UFm0nOXE
	    [....]
	    e4GCaWrumMypBxMjMqGlWwPUkTqekuG6Zq71
	    =tk/S
	    -----END PGP MESSAGE-----" | gpg -d
    

    That is the decrypted content :

	You need a passphrase to unlock the secret key for
	user: "&lt;your uid&gt;"
	2048-bit RSA key, ID 239F254, created 2014-11-22 (main key ID 239F254)
	
	gpg: encrypted with 2048-bit RSA key, ID 239F254, created 2014-11-22
	      "your uid"
	
	Here are the instructions for confirming the OpenPGP key registration that we
	received for use in Launchpad.
	
	Requester details:
	
	    User name    : &lt;Your user name&gt;
	    Email address: &lt;your email adress&gt;
	
	Key details:
	
	    Fingerprint : &lt;your fingerprint&gt;
	    Key type/ID : 2048R/&lt;your key&gt;
	
	UIDs:
	    &lt;your email&gt;
	
	Please go here to finish adding the key to your Launchpad account:
	
	    https://launchpad.net/token/HshjsjYSHSossix,s


* Open the given link to finally add your key to your launchpad account.
</t>
<t tx="davy.20141213005428.349"> 
* Download and sign the code of conduct ::

	wget -pO- https://launchpad.net/codeofconduct/2.0/+download | gpg --clearsign

* This will display the signed code of conduct. Copy it from **-----BEGIN PGP SIGNED MESSAGE-----** to **-----END PGP SIGNATURE-----**

* Go to the page for signing the code of conduct : https://launchpad.net/codeofconduct/2.0/+sign

* Paste the signed code of conduct and validate</t>
<t tx="davy.20141213005428.350">* When your have accepted the code of conduct, you'll be able to activate a PPA :

    https://launchpad.net/~leo-editor/+activate-ppa
    
* Give it an url (https://launchpad.net/~leo-editor/ppa is the most common), name, an description.
    We could think of another https://launchpad.net/~leo-editor/unstable for daily builds

* Activate it !</t>
<t tx="davy.20141213005428.351">* To push the sources on launchpad, we use dput ::

	sudo apt-get install packaging-dev

* You can simply use this command in the distDir ::

	dput ppa:leo-editor/ppa leo_5.0-1.source.changes

* You can also configure a `leo` config in `~/.dput.cf`
     You can configure different upload protocols (sftp, rsync, scp...) ::
     
	[ppa]
	fqdn = ppa.launchpad.net
	method = ftp
	incoming = ~leo-editor/ppa/ubuntu/
	login = anonymous
	allow_unsigned_uploads = 0
	
	[unstable]
	fqdn = ppa.launchpad.net
	method = ftp
	incoming = ~leo-editor/unstable/ubuntu/
	login = anonymous
	allow_unsigned_uploads = 0      
	
	
* Then launch this command in distDir ::

	dput ppa leo_5.0-1.source.changes
    
    or
    
	dput unstable leo_5.0-1.source.changes
	
..note ::

   Important : no .deb files have to be present in the distDir. 
   
   So use a source `dpkg-buildpackage -S` and **not** a binary one `dpkg-buildpackage`
   
   Otherwise launchpad will give you the following error ::
   
	Source/binary (i.e. mixed) uploads are not allowed.
    

* If everything went OK, launchpad will automaticaly build the deb and publish it into the serie given in the debian/changelog header (here `lucid`).
Instead of changing the header and upload the sources again, launchpad allow to copy the generated deb to other series.

* We can copy manually the "binary" build (.deb) for each series :

    https://launchpad.net/~leo-editor/+archive/ubuntu/ppa/+copy-packages 
    
* The multi series script aim to do it automatically with the launchpad API and python-launchpadlib ::

    sudo pip install launchpadlib
</t>
<t tx="davy.20141213005428.352">@tabwidth -4</t>
<t tx="davy.20141213005428.353">leo (5.0.1-1) lucid; urgency=low

  * Fix a stupid mime copy-paste error
  
  * Fix launchers

 -- Cottet Davy (Davy39) &lt;cottet_davy@yahoo.fr&gt;  Fri, 25 Nov 2014 11:53:27 +0800



leo (5.0) lucid; urgency=low

  * First attempt to build a debian package

 -- Cottet Davy (Davy39) &lt;cottet_davy@yahoo.fr&gt;  Fri, 25 Nov 2014 00:53:27 +0800
</t>
<t tx="davy.20141213005428.354"></t>
<t tx="davy.20141213005428.355">@language makefile
@tabwidth 8
#!/usr/bin/make -f
# -*- makefile -*-
# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

clean:
	dh_testdir
	dh_testroot
	find . -name "*.pyc" -exec rm {} \;
	find . -name "Ui_*" -exec rm {} \;
	find . -name __pycache__ -prune | xargs rm -rf
	rm -rf debian/leo
	rm -rf .pc
	rm -rf build
	dh_clean

build: build-arch build-indep
build-arch:
build-indep:

install: 
	dh_testdir -i
	dh_testroot -i
	dh_prep -i 
	python setup.py install --root=debian/leo --install-layout=deb --install-lib=usr/share/pyshared --install-data=usr/share/pyshared
	find debian/leo/ -name '*.py[co]' -delete
	find . -name __pycache__ -prune | xargs rm -rf
    
binary: binary-indep binary-arch
binary-arch:

# Build architecture-independent files here.
binary-indep: install
	dh_testdir -i
	dh_testroot -i
	dh_installchangelogs
	dh_installdocs -i
	#dh_installmenu -i
	#dh_installman -i
	dh_installmime
	dh_install -i -X__pycache__
	#dh_link -i
	#dh_lintian -i
	dh_compress -i
	dh_fixperms -i
	dh_installdeb -i
	dh_gencontrol -i
	dh_md5sums -i
	dh_builddeb -i

.PHONY: clean binary-indep binary-arch binary install</t>
<t tx="davy.20141213005428.356">Source: leo
Maintainer: Edward K. Ream &lt;edreamleo@gmail.com&gt;
Section: editors
Priority: optional
Build-Depends: python-setuptools (&gt;= 0.6b3), python, debhelper (&gt;= 7.4.3)
Standards-Version: 3.9.1

Package: leo
Architecture: all
Depends: python, python-pyqt5.qtsvg | python-qt4-phonon,
 python-pyqt5.qtwebkit | python-qt4-gl, 
 python-docutils, python-enchant, python-pygments
Description:Leonine Editor with Outlines
&lt;&lt;description&gt;&gt;
 .    
&lt;&lt;links&gt;&gt;</t>
<t tx="davy.20141213005428.357"> Leo is a PIM, IDE and outliner written in 100% pure Python.
 Leo features a multi-window outlining editor, Python colorizing,
 powerful outline commands and many other things, including 
 unlimited Undo/Redo and an integrated Python shell(IDLE) window.
 Leo requires Python 2.6 or above. Leo works with Python 3.x</t>
<t tx="davy.20141213005428.358">	Docs:      http://leoeditor.com/leo_toc.html
	Tutorials: http://leoeditor.com/tutorial.html
	Videos:    http://leoeditor.com/screencasts.html
	Forum:     http://groups.google.com/group/leo-editor
	Download:  http://sourceforge.net/projects/leo/files/
	Github:    https://github.com/leo-editor/leo-editor
	Quotes:    http://leoeditor.com/testimonials.html</t>
<t tx="davy.20141213005428.360">#!/usr/bin/env python
""" Leo launcher script
A minimal script to launch leo.
"""
import sys
sys.path.append('/usr/share/pyshared/')
import leo.core.runLeo
if len(sys.argv[1:])&gt;1:
    leo.core.runLeo.run(sys.argv[1:])
else:
    leo.core.runLeo.run()
</t>
<t tx="davy.20141213005428.366">[Desktop Entry]
Name=Leo
Type=Application
Exec=/usr/bin/leo %f
Terminal=false
Icon=/usr/share/icons/leo.png
Comment=Leonine Editor with Outlines
NoDisplay=false
Categories=Development;IDE
Name[en]=Leo</t>
<t tx="davy.20141213005428.369">debian/leo.desktop usr/share/applications
debian/leo.png usr/share/icons
#debian/launcher/leo /usr/bin

</t>
<t tx="davy.20141213005428.371">text/xml; leo '%s' ; edit=leo '%s' ; test=test "$DISPLAY" != "" ; description="Leo Editor Outline" ; priority=2
</t>
<t tx="davy.20141213005428.372">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;mime-info xmlns='http://www.freedesktop.org/standards/shared-mime-info'&gt;
  &lt;mime-type type="text/xml"&gt;
    &lt;comment&gt;Leo Editor Outline&lt;/comment&gt;
    &lt;comment xml:lang="en"&gt;Leo Editor Outline&lt;/comment&gt;
    &lt;icon name="leo"/&gt;
    &lt;glob pattern="*.leo"/&gt;
  &lt;/mime-type&gt;
&lt;/mime-info&gt;</t>
<t tx="davy.20141213005428.373">@others</t>
<t tx="davy.20141213005428.374">@language python
@
##################
# Options for RPM build#
##################
# [bdist_rpm] section of setup.
# base directory for creating built distributions
bdist-base =
 
# Base directory for creating RPMs (defaults to "rpm" under bdist-base; must be specified for RPM 2)
rpm-base =

# directory to put final RPM files in (and .spec files if spec-only)
dist-dir =     

# path to Python interpreter to hard-code in the .spec file (default: "python")
python =            

# hard-code the exact path to the current Python interpreter in the .spec file
fix-python =        

# only regenerate spec file
spec-only =         

# only generate source RPM
source-only =      

# only generate binary RPM
binary-only  =      

# use bzip2 instead of gzip to create source distribution
use-bzip2 =         

# name of the (Linux) distribution to which this RPM  applies (*not* the name of the module distribution!)
distribution-name  =

# package classification [default: "Development/Libraries"]
group =            

# RPM release number
release =           

# RPM serial number
serial =

# RPM "vendor" (eg. "Joe Blow &lt;joe@example.com&gt;") [default: maintainer or author from setup script]
vendor =             

# RPM packager (eg. "Jane Doe &lt;jane@example.net&gt;")[default: vendor]
packager =           

# list of documentation files (space or comma-separated)
doc-files =        

# RPM changelog
changelog =         

# name of icon file
icon =           
   
# capabilities provided by this package
provides =           

# capabilities required by this package
requires =          

# capabilities which conflict with this package
conflicts =         

# capabilities required to build this package
build-requires =     

# capabilities made obsolete by this package
obsoletes =         

# do not automatically calculate dependencies
no-autoreq =         

# don't clean up RPM build directory
keep-temp =    

# clean up RPM build directory [default]
no-keep-temp =       

# compile with RPM_OPT_FLAGS when building from source RPM
use-rpm-opt-flags =  

 # do not pass any RPM CFLAGS to compiler
no-rpm-opt-flags  =

# RPM 3 compatibility mode (default)
rpm3-mode =

# RPM 2 compatibility mode
rpm2-mode  =        

# Specify a script for the PREP phase of RPM building
prep-script =       

# Specify a script for the BUILD phase of RPM building
build-script  =     

# Specify a script for the pre-INSTALL phase of RPM building
pre-install =       

# Specify a script for the INSTALL phase of RPM building
install-script =     

# Specify a script for the post-INSTALL phase of RPM  building
post-install =      

# Specify a script for the pre-UNINSTALL phase of RPM building
pre-uninstall =      

# Specify a script for the post-UNINSTALL phase of RPM building
post-uninstall  =    

#  Specify a script for the CLEAN phase of RPM building
clean-script =     

# Specify a script for the VERIFY phase of the RPM build
verify-script  =     

# Force an architecture onto the RPM build process
force-arch =         

# Run the INSTALL phase of RPM building in quiet mode
quiet =        
</t>
<t tx="davy.20141213005428.378">Fix launcher issue : distutils scripts do no support private modules
--- a/setup.py
+++ b/setup.py
@@ -99,8 +99,4 @@
 ,
     package_data = package_data,
     #scripts = ['leo-install.py'],# Not needed anymore ?
-    entry_points =     {
-            'console_scripts': ['leoc = leo.core.runLeo:run'],
-            'gui_scripts' : ['leo = leo.core.runLeo:run'],
-        }
 )
</t>
<t tx="davy.20141213005428.379">01_remove_entry_points_and_script.patch

</t>
<t tx="davy.20141213005428.381">debian/leo.png
</t>
<t tx="davy.20141213005428.382">3.0 (quilt)
</t>
<t tx="davy.20141213005428.383">extend-diff-ignore="\.egg-info$"
extend-diff-ignore="leo/dist"</t>
<t tx="davy.20141213005428.387">7
</t>
<t tx="davy.20141213005428.388">Copyright: Copyright 1997 - 2014 Edward K. Ream &lt;edreamleo@gmail.com&gt;
Upstream Author: Detlev Offenbach &lt;detlev@die-offenbachs.de&gt;
License: MIT
    Leo is Open Software and is distributed under the terms of the MIT
    License. The gist of the license is that Leo is absolutely free, even
    for commercial use (including resale). There is no GNU-like "copyleft"
    restriction. The Open Source Initiative board has voted to certify the
    MIT license as Open Source. This license is compatible with the GPL.
    .
    Copyright (c) 1997-2014 by Edward K. Ream. All Rights Reserved.
    .
    Permission to use, copy, modify, and distribute this software and its
    documentation for any purpose and without fee is hereby granted,
    provided that the above copyright notice appear in all copies and that
    both that copyright notice and this permission notice appear in
    supporting documentation, and that the names of Leo or Edward K. Ream
    not be used in advertising or publicity pertaining to distribution of
    the software without specific, written prior permission.
    .
    DISCLAIMER OF WARRANTIES
    .
    EDWARD K. REAM (REAM) SPECIFICALLY DISCLAIMS ALL WARRANTIES, EXPRESSED
    OR IMPLIED, WITH RESPECT TO THIS COMPUTER SOFTWARE, INCLUDING BUT NOT
    LIMITED TO IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
    PARTICULAR PURPOSE. IN NO EVENT SHALL REAM BE LIABLE FOR ANY LOSS OF
    PROFIT OR ANY COMMERCIAL DAMAGE, INCLUDING BUT NOT LIMITED TO SPECIAL,
    INCIDENTAL, CONSEQUENTIAL OR OTHER DAMAGES.
</t>
<t tx="davy.20141213005428.391">version=3
https://pypi.python.org/simple/leo/leo-(.+).zip</t>
<t tx="davy.20141213005428.392"></t>
<t tx="davy.20141213005428.498"></t>
<t tx="davy.20141213005428.499"></t>
<t tx="davy.20141213005428.5"></t>
<t tx="davy.20141213005428.500"></t>
<t tx="davy.20141213005428.501">Fix launcher issue : distutils scripts do no support private modules
--- a/setup.py
+++ b/setup.py
@@ -99,8 +99,4 @@
 ,
     package_data = package_data,
     #scripts = ['leo-install.py'],# Not needed anymore ?
-    entry_points =     {
-            'console_scripts': ['leoc = leo.core.runLeo:run'],
-            'gui_scripts' : ['leo = leo.core.runLeo:run'],
-        }
 )
</t>
<t tx="davy.20141213005428.502">01_remove_entry_points_and_script.patch

</t>
<t tx="davy.20141213005428.503">#!/sw/bin/python2.7
""" Leo launcher script
A minimal script to launch leo.
"""
import sys
sys.path.append('/sw/share/pyshared/')
import leo.core.runLeo
if len(sys.argv[1:])&gt;1:
    leo.core.runLeo.run(sys.argv[1:])
else:
    leo.core.runLeo.run()
</t>
<t tx="davy.20141213005428.504">debian/leo.png
</t>
<t tx="davy.20141213005428.505">3.0 (quilt)
</t>
<t tx="davy.20141213005428.506">extend-diff-ignore="\.egg-info$"
extend-diff-ignore="leo/dist"</t>
<t tx="davy.20141213005428.507">leo (5.0.1-fink1) lucid; urgency=low

  * Fix a stupid mime copy-paste error
  
  * Fix launchers

 -- Cottet Davy (Davy39) &lt;cottet_davy@yahoo.fr&gt;  Fri, 25 Nov 2014 11:53:27 +0800



leo (5.0) lucid; urgency=low

  * First attempt to build a debian package

 -- Cottet Davy (Davy39) &lt;cottet_davy@yahoo.fr&gt;  Fri, 25 Nov 2014 00:53:27 +0800
</t>
<t tx="davy.20141213005428.508">debian/leo.png sw/share/icons
debian/launcher/leo sw/bin</t>
<t tx="davy.20141213005428.509">#!/usr/bin/make -f
# -*- makefile -*-
# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

clean:
	dh_testdir
	dh_testroot
	find . -name "*.pyc" -exec rm {} \;
	find . -name "Ui_*" -exec rm {} \;
	find . -name __pycache__ -prune | xargs rm -rf
	rm -rf debian/leo
	rm -rf .pc
	rm -rf build
	dh_clean

build: build-arch build-indep
build-arch:
build-indep:

install: 
	dh_testdir -i
	dh_testroot -i
	dh_prep -i 
	python setup.py install --root=debian/leo --prefix=sw--install-lib=share/pyshared --install-data=share/pyshared
	find debian/leo/ -name '*.py[co]' -delete
	find . -name __pycache__ -prune | xargs rm -rf
    
binary: binary-indep binary-arch
binary-arch:

# Build architecture-independent files here.
binary-indep: install
	dh_testdir -i
	dh_testroot -i
	#dh_installchangelogs
	#dh_installdocs -i
	#dh_installmenu -i
	#dh_installman -i
	#dh_installmime
	dh_install -i -X__pycache__
	#dh_link -i
	#dh_lintian -i
	dh_compress -i
	dh_fixperms -i
	dh_installdeb -i
	dh_gencontrol -i
	dh_md5sums -i
	dh_builddeb -- -Zgzip

.PHONY: clean binary-indep binary-arch binary install
</t>
<t tx="davy.20141213005428.510">7
</t>
<t tx="davy.20141213005428.511">Copyright: Copyright 1997 - 2014 Edward K. Ream &lt;edreamleo@gmail.com&gt;
Upstream Author: Detlev Offenbach &lt;detlev@die-offenbachs.de&gt;
License: MIT
    Leo is Open Software and is distributed under the terms of the MIT
    License. The gist of the license is that Leo is absolutely free, even
    for commercial use (including resale). There is no GNU-like "copyleft"
    restriction. The Open Source Initiative board has voted to certify the
    MIT license as Open Source. This license is compatible with the GPL.
    .
    Copyright (c) 1997-2014 by Edward K. Ream. All Rights Reserved.
    .
    Permission to use, copy, modify, and distribute this software and its
    documentation for any purpose and without fee is hereby granted,
    provided that the above copyright notice appear in all copies and that
    both that copyright notice and this permission notice appear in
    supporting documentation, and that the names of Leo or Edward K. Ream
    not be used in advertising or publicity pertaining to distribution of
    the software without specific, written prior permission.
    .
    DISCLAIMER OF WARRANTIES
    .
    EDWARD K. REAM (REAM) SPECIFICALLY DISCLAIMS ALL WARRANTIES, EXPRESSED
    OR IMPLIED, WITH RESPECT TO THIS COMPUTER SOFTWARE, INCLUDING BUT NOT
    LIMITED TO IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
    PARTICULAR PURPOSE. IN NO EVENT SHALL REAM BE LIABLE FOR ANY LOSS OF
    PROFIT OR ANY COMMERCIAL DAMAGE, INCLUDING BUT NOT LIMITED TO SPECIAL,
    INCIDENTAL, CONSEQUENTIAL OR OTHER DAMAGES.
</t>
<t tx="davy.20141213005428.512">Source: leo
Maintainer: Edward K. Ream &lt;edreamleo@gmail.com&gt;
Section: editors
Priority: optional
Build-Depends: python-setuptools (&gt;= 0.6b3), python, debhelper (&gt;= 7.4.3)
Standards-Version: 3.9.1

Package: leo
Architecture: all
Depends: python27, qt4-base-mac, pyqt4-mac-py27, qscintilla2-qt4-mac-py27,
 docutils-py27, pygments-py27
Description:Leonine Editor with Outlines
 Leo is a PIM, IDE and outliner written in 100% pure Python.
 Leo features a multi-window outlining editor, Python colorizing,
 powerful outline commands and many other things, including 
 unlimited Undo/Redo and an integrated Python shell(IDLE) window.
 Leo requires Python 2.6 or above. Leo works with Python 3.x
 .    
	Docs:      http://leoeditor.com/leo_toc.html
	Tutorials: http://leoeditor.com/tutorial.html
	Videos:    http://leoeditor.com/screencasts.html
	Forum:     http://groups.google.com/group/leo-editor
	Download:  http://sourceforge.net/projects/leo/files/
	Github:    https://github.com/leo-editor/leo-editor
	Quotes:    http://leoeditor.com/testimonials.html
</t>
<t tx="davy.20141213005428.513">Info2: &lt;&lt;
Package: leo%type_pkg[python]
Version: 5.0
Revision: 1
Type: python (2.7)
Description: Leonine Editor with Outlines
Maintainer: Edward K. Ream &lt;edreamleo@gmail.com&gt;
License: MIT
Homepage: http://leoeditor.com

Source: https://pypi.python.org/packages/source/l/leo/leo-%v.zip
#Source-MD5:3158ead3d4dae61d082b5014264068f8

Depends: python%type_pkg[python], qt4-base-mac, pyqt4-mac%type_pkg[python], qscintilla2-qt4-mac%type_pkg[python], docutils%type_pkg[python], pygments%type_pkg[python]
BuildDepends: fink (&gt;= 0.24.12), setuptools-tng-py%type_pkg[python]

InstallScript: %p/bin/python%type_raw[python] setup.py install --root=%d

DocFiles: PKG-INFO
&lt;&lt;
</t>
<t tx="davy.20141213005428.514">version=3
https://pypi.python.org/simple/leo/leo-(.+).zip</t>
<t tx="davy.20141213005428.515"></t>
<t tx="davy.20141213005428.533"></t>
<t tx="davy.20141213005428.534"></t>
<t tx="davy.20141213005428.535">`setuptools` is used in setup.py in order to achieve leo's packaging.

Here is the main principles of usage :

* `setup.py` : set files to be installed via `./setup.py install` or `pip install`

* `MANIFEST.in` : set the files to be included in the source tarball via `./setup.py sdist` 

* Every file included in `setup.py` are automaticaly included into source tarball.

* `MANIFEST.in` is only necessary to include extra files that will not be installed into a source tarball.

.. note: 

    it would be possible to automatically install every files included in
    `MANIFEST.in` by adding ` include_package_data=True` to setup.py but then
    every file from sources are installed and that is not necessary.

</t>
<t tx="davy.20141213005428.536">
* `setuptools` include a function to recursively find sub-packages (folders) : `package = find_packages()`

    To be considered as a package, a folder have to contain `__init__.py`) :
    that is a first way to filter wanted/unwanted folders.

* Undesirable packages can be excluded this way : `packages =
find_packages(exclude=('leo.test','leo.plugins*',))` (note the `*` when contains
subpackages)

* By default only `.py` files under these previously selected packages/folders
are included, plus some default files (setup.cfg, README, PKG-INFO...)
 
* To include other kind of files we use `package_data` with this sytax ::

    * add leo/module1/submodule1/icons folder and its jpg {'leo.module1.submodule1':['icons/*.jpg']}
     
    * add every txt files within previously declared packages/folders + top level {'':['*.txt']}

* To exclude specific files that have be included by previous methods, we can
use `exclude_package_data`

* Finally, we can specify some extra `data_files` that can be mapped to
different paths than package ones ::

    data_files=[('Documentation', ['doc/leoPlugin.leo', 'doc/leoCheatSheet.leo']),
                        ('Config', ['cfg/data.cfg']),
                        ('/etc/init.d', ['init-script'])]
 
* Then it is possible to specify installation paths ::

    python setup.py install --root=dist/myInstallTestDir
    --install-lib=pathForModules --install-data=pathForDataFiles
            

</t>
<t tx="davy.20141213005428.537">TOBE DOCUMENTED

Build of source Tarball -&gt; sdist

Build RPM -&gt; bdist

Help to build nsis &amp; deb -&gt;install

Upload  to pypi -&gt; upload
</t>
<t tx="davy.20141213005428.538">'''setup.py for leo'''
import leo.core.leoVersion
import os
from setuptools import setup, find_packages
# Note :
    # Folder without __init__.py are not included by default
    # Even if it unecessary (because no __init__.py), 
    # We explicitely exclude unwanted packages with :
    # find_packages(exclude=('leo.extensions','leo.test','leo.plugins.test',))

    #We have to specify data, ie not .py files &amp; not __init__.py folders

&lt;&lt; version &gt;&gt;

# To cach all the files of files of ckeditor :
os.chdir(os.path.join('leo','external'))
ckeditorFiles = [os.path.join(path, f) for path, _, files in os.walk('ckeditor') for f in files if '.git' not in path]
os.chdir(os.path.join('..','..'))

package_data = &lt;&lt; package_data &gt;&gt;

exclude_package_data = &lt;&lt; exclude_package_data &gt;&gt;

setup(
    name = &lt;&lt; name &gt;&gt;,
    version = version,
    author = &lt;&lt; author &gt;&gt;,
    author_email = &lt;&lt; author_email &gt;&gt;,
    license = &lt;&lt; license &gt;&gt;,
    description = &lt;&lt; description &gt;&gt;, # becomes "Summary" in pkg-info
    long_description = &lt;&lt; long_description &gt;&gt;,
    url = &lt;&lt; url &gt;&gt;,
    download_url = &lt;&lt; download_url &gt;&gt;,
    bugtrack_url = &lt;&lt; bugtrack_url &gt;&gt;,# pypi still needs this added manually via web form
    platforms = &lt;&lt; platforms &gt;&gt;,
    requires = &lt;&lt; requires &gt;&gt;, # only include dependencies which can be installed by pip (so not PyQt or SIP)
    classifiers = &lt;&lt; classifiers &gt;&gt;,
    packages = &lt;&lt; packages &gt;&gt;,
    package_data = package_data,
    #scripts = ['leo-install.py'],# Not needed anymore ?
    entry_points = &lt;&lt; entry_points &gt;&gt;
)
@others
@language python
@tabwidth -4
</t>
<t tx="davy.20141213005428.539"></t>
<t tx="davy.20141213005428.540"></t>
<t tx="davy.20141213005428.541">'leo'</t>
<t tx="davy.20141213005428.542"># Make sure that it is the same in setup.py, debian/changelog, fink/changelog, leo.nsis, website, doc...
# TODO : implement a reliable global parameter or clone functionality
version = '5.0.1'
debRev = '1'
finkRev = '1'</t>
<t tx="davy.20141213005428.543">"Edward K. Ream"</t>
<t tx="davy.20141213005428.544">'edreamleo@gmail.com'</t>
<t tx="davy.20141213005428.545">'http://leoeditor.com'</t>
<t tx="davy.20141213005428.546">'http://sourceforge.net/projects/leo/files/Leo/'</t>
<t tx="davy.20141213005428.547">'https://github.com/leo-editor/leo-editor/issues'</t>
<t tx="davy.20141213005428.548">'MIT License'</t>
<t tx="davy.20141213005428.549">"Leo: Leonine Editor with Outlines"</t>
<t tx="davy.20141213005428.550">open('README.TXT', 'r').read()</t>
<t tx="davy.20141213005428.551">['linux','windows']</t>
<t tx="davy.20141213005428.552">[
        'Development Status :: 5 - Production/Stable',
        'Environment :: Win32 (MS Windows)',
        'Environment :: X11 Applications :: Qt',
        'Intended Audience :: End Users/Desktop',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: MIT License',
        'Natural Language :: English',
        'Operating System :: MacOS',
        'Operating System :: Microsoft :: Windows',
        'Operating System :: POSIX :: Linux',
        'Programming Language :: Python :: 2.6',
        'Programming Language :: Python :: 3',
        'Topic :: Software Development',
        'Topic :: Text Editors',
        'Topic :: Text Processing',
    ]</t>
<t tx="davy.20141213005428.553"></t>
<t tx="davy.20141213005428.554">['docutils']</t>
<t tx="davy.20141213005428.555">{
        'console_scripts': ['leoc = leo.core.runLeo:run'],
        'gui_scripts' : ['leo = leo.core.runLeo:run'],
    }</t>
<t tx="davy.20141213005428.556">find_packages(exclude=('leo.extensions','leo.test','leo.plugins.test',))</t>
<t tx="davy.20141213005428.557">{
# Files to include for every packages
'':     [
        '*.leo', '*.ini', '*.ui', '*.txt', '*.json', '*.css',
        '*.html', '*.js', '*.svg', '*.bat', '*.sh', '*.rst', '*.md'
        ],
# Include www folder and its content. What is it for ?
'leo':  [ 
        'www/*',
        # Include icons... 
        'Icons/*.*',
        #Why this entire theme folder ?
        'Icons/Tango/*/*/*.png', 
        'Icons/recorder/*.png',
        # Duplicate (Themes)
        'Icons/cleo/*.*',  
        'Icons/cleo/small/*.png',
        # Include themes icons... 
        # It would be simpler to bring them on same level ex: 'themes/*/icons/*.png   
       'themes/leo_dark_0/Icons/*.png',
       # Duplicate : Icons
       'themes/leo_dark_0/Icons/cleo/*.png',
       'themes/leo_dark_0/Icons/cleo/*.html','themes/leo_dark_0/Icons/cleo/small/*.png',
       'themes/leo_dark_0/Icons/Tango/16x16/apps/*.png',
       # We could also specify extensions or declare it as package with an __init__.py
       'scripts/*',
       #Leo distribution files (do we really need to install them ?)
       'dist/*.*'
       ],    
# For plugins we create __init__.py into sub-folders 
#Do we want to include obsolete ones ?
# Do we want this pyd file ?
'leo.plugins':['*.pyd'],
'leo.plugins.qmlnb':['qml/*'],
'leo.plugins.modes':['catalog','*.xml'],
# Wouldn't it be better to install ckedito separatly ?
'leo.external':ckeditorFiles,
# Do we have to install external.obsolete ?
}</t>
<t tx="davy.20141213005428.558">{}</t>
<t tx="davy.20141213005428.6"></t>
<t tx="davy.20141213005428.639">We can simplify the process by using recursive imports and a single nsi file...

TO BE DOCUMENTED</t>
<t tx="davy.20141213005428.640"></t>
<t tx="davy.20141213005428.660"></t>
<t tx="davy.20141213005428.662"></t>
<t tx="davy.20141213005428.665"></t>
<t tx="davy.20141213005428.667">@language python
'''
* Generate a source tarball with a debianized name and extract it into dist folder

* Copy dist/debian folder to archive/src folder 
 
* Generate debian source packages &amp; files

''' 
&lt;&lt; version &gt;&gt;
&lt;&lt; includes &gt;&gt;
&lt;&lt; pathes &gt;&gt;

@others

g.es_print('Generate Tarball...')
makeSdist()
g.es_print('Extract Tarball...')
extractSdist()
g.es_print('Rename Tarball...')
debianizeTarballName()
g.es_print('Copy Debian directory...')
copyDebianDir()
g.es_print('Make Debian sources...')
makeDebianSrc()
g.es_print('Done')</t>
<t tx="davy.20141213005428.668"># Make sure that it is the same in setup.py, debian/changelog, fink/changelog, leo.nsis, website, doc...
# TODO : implement a reliable global parameter or clone functionality
version = '5.0.1'
debRev = '1'
finkRev = '1'</t>
<t tx="davy.20141213005428.669">import leo.core.leoVersion
import os
</t>
<t tx="davy.20141213005428.670">abspath,exists,join,dirname = g.os_path_abspath,g.os_path_exists,g.os_path_join,g.os_path_dirname

# Top directory : leo-editor folder
rootDir	     = abspath(join(dirname(c.fileName()),'..'))
# Leo's dist folder
# Contains necessary files for building distribution
distDir	     = join(rootDir,'dist')
# Directory to build and store distibution packages and source tarball
archiveDir       = abspath(join(rootDir,'..','archive'))
# Path to the source tarball
rawTarball	  = join(archiveDir,'leo-'+version+'.tar.gz')
# Directory where source tarball is extracted in order to build various distrib
srcDir	      = join(archiveDir,'src')
# Debianized source tarball 
origTarball	 = join(archiveDir,'leo_'+version+'.orig.tar.gz')
# Debian leo_5.x.source.changes to upload on launchpad
sourceChanges       = join(archiveDir,'leo_'+version+'-'+debRev+'.source.changes')
# Path to Leo's debian folder
debianDir	   = join(distDir,'debian')
# Path to leo.nsi 
nsiFile = join(distDir,'windows','leo.nsi')
# Path to windowsArchiveDir
windowsArchiveDir = join(archiveDir,'windows')
# Path to fink files
finkDir = join(distDir,'mac','fink')
# Path to Debian .deb package
debPackage       = join(archiveDir,'leo_'+version+'-'+debRev+'_all.deb')
# Path to Fink .deb package
finkPackage       = join(archiveDir,'leo_'+version+'-'+finkRev+'_all.deb')</t>
<t tx="davy.20141213005428.671">def makeSdist():
    """
    * Remove leo.egg-info folder from last build
    
    * Call setuptool to generate a source tarball
    
    """
    # Go to root directory
    os.chdir(rootDir)
    # Remove leo.egg-info folder from last build
    g.execute_shell_commands('rm -R leo.egg-info',trace=True)
    # Make the sources tarball in archiveDir
    g.execute_shell_commands('python setup.py sdist -d '+archiveDir,trace=True)
    </t>
<t tx="davy.20141213005428.672">def extractSdist():
    "Extract the source tarball into archiveDir"
    # Go to archiveDir
    g.execute_shell_commands('rm -R '+srcDir)
    g.execute_shell_commands('mkdir '+srcDir)
    # Extract it
    g.execute_shell_commands('tar xfz '+rawTarball+' -C '+srcDir+' --strip-components=1')</t>
<t tx="davy.20141213005428.673">def debianizeTarballName():
    """
    Rename archive tarball to be debian compliant ::
        
        leo-5.0b2.tar.gz -&gt; leo_5.0b2.orig.tar.gz
    
    """
    g.execute_shell_commands('cp '+rawTarball+' '+origTarball)</t>
<t tx="davy.20141213005428.674">def copyDebianDir():
    """Copy debian folder to the extracted archive"""
    g.execute_shell_commands('cp -R '+debianDir+' '+srcDir,trace=True)</t>
<t tx="davy.20141213005428.675">def makeDebianSrc():
    """
    * Generate Debian sources
    """
    os.chdir(srcDir)
    g.execute_shell_commands('dpkg-buildpackage -S',trace=True)</t>
<t tx="davy.20141213005428.676">To be able to use git from Leo in any platform, we use Dulchich pure python client.
To install it ::

    pip install dulwich
    
</t>
<t tx="davy.20141213005428.677">TODO :

Configure bdist_rpm part of setup.cfg</t>
<t tx="davy.20141213005428.678">TODO</t>
<t tx="davy.20141213005428.73"></t>
<t tx="davy.20141213005428.74"></t>
<t tx="davy.20141213005428.75"></t>
<t tx="davy.20141213005428.76">http://nsis.sourceforge.net/Docs/Modern%20UI%202/Readme.html</t>
<t tx="davy.20141213005428.77">http://nsis.sourceforge.net/Docs/Chapter4.html#4.5</t>
<t tx="davy.20141213005428.78">http://nsis.sourceforge.net/Docs/nsDialogs/Readme.html</t>
<t tx="davy.20141213005428.79">sudo apt-get install nsis
cd leo/dist
makensis leo.nsi</t>
<t tx="davy.20141213005428.80"></t>
<t tx="davy.20141217092242.2">See all tags

Checking out another branch:

r.refs.set_symbolic_ref("HEAD", "refs/heads/foo")
r._build_tree()

Creating a branch:

r.refs["refs/heads/foo"] = head_sha1_of_new_branch

</t>
<t tx="davy.20141217092242.5">@language python
import os
import time
from  leo.core.leoQt import QtWidgets
import c.config.getString as get

try:
    from dulwich import porcelain as git
except ImportError:
    g.es('Error : To use this functionality, please install Dulwich', color='red')
#from dulwich.errors import 
iDial = g.app.gui.runAskOkCancelStringDialog
dDial = g.app.gui.runOpenDirectoryDialog
mBox= g.app.gui.runAskYesNoDialog
abspath, join, dirname = g.os_path_abspath, g.os_path_join, g.os_path_dirname

def main():
    # Path to the repository
    repo=''
    while True:
        if not repo:
            repo =  abspath(get('repo')) or dDial(title='Select a repository',startdir='.')
        else:
            repo = dDial(title='Select a repository',startdir='.')
        if not repo :
                return
        if not '.git' in os.listdir(repo):
            resp = mBox(c,title = 'Error',message='%s is not a Git repository.\nTry another one ?' % (repo))
            if resp ==  'yes':continue
            else: return
        else : break
    # Tag string
    tag =[&lt;&lt; version &gt;&gt;][0]
    # Tag author (optional, if annotated is set)
    commiter = get('commiter') or iDial(c,'Git - Tag', 'Enter your Name :', okButtonText = 'Next') 
    if not commiter : return
    # Tag message (optional)
    message = iDial(c,'Git - Tag', 'Enter a message for this release :', okButtonText = 'Tag !')
    if not message : return
    # Whether to create an annotated tag
    annotated = True	
    # Object the tag should point at
    objectish = 'HEAD'
    # Optional time for annotated tag
    tag_time = int(time.time())	
    # Optional timezone for annotated tag
    tag_timezone = time.timezone if (time.localtime().tm_isdst == 0) else time.altzone
    try :
        git.tag_create(repo, tag, commiter, message, annotated, objectish, tag_time,tag_timezone)
    except Exception as e:
        g.es(e, color='red')
if __name__ == '__main__': 
    main()
</t>
<t tx="davy.20141217105903.10"></t>
<t tx="davy.20141217105903.11">Configuration of RPM build is done via `setuptools` and `setup.cfg`</t>
<t tx="davy.20141217105903.12"></t>
<t tx="davy.20141217105903.13"></t>
<t tx="davy.20141217105903.14"></t>
<t tx="davy.20141217105903.15"></t>
<t tx="davy.20141217105903.16"></t>
<t tx="davy.20141217105903.4"></t>
<t tx="davy.20141217105903.5">TODO : it will be possible to  make releases on github using its API :
https://github.com/michaelliao/githubpy

https://developer.github.com/v3/

https://github.com/blog/1547-release-your-software

https://developer.github.com/v3/repos/releases/


This look promizing for deb distribution :
https://github.com/dz0ny/apt-transport-github</t>
<t tx="davy.20141217105903.6"></t>
<t tx="davy.20141217105903.7"></t>
<t tx="davy.20141217105903.8"></t>
<t tx="davy.20141217105903.9"></t>
<t tx="davy.20141223204341.10">#@g.command('git-clone')
#def clone(event):
def clone():
    """Clone a local or remote git repository.
Parameters
-----------------

* source	Path or URL for source repository
* target	Path to target repository (optional)
* bare	Whether or not to create a bare repository
* outstream	Optional stream to write progress to

Returns	The new repository"""

    title = 'Clone a remote repository'
    message =  """Enter a git repository URL"""
    cancelButtonText='Cancel'
    okButtonText='Commit'
    url = g.app.gui.runAskOkCancelStringDialog(c,title,message,cancelButtonText,
    okButtonText)          
    if url :
        while True: 
            path=QtWidgets.QFileDialog.getExistingDirectory (c.frame.top,
                                                                                            caption='Choose an empty directory',
                                                                                            #directory='.'
                                                                                            )
            if not os.listdir(path): 
                target = path
            else:
                b=QtWidgets.QMessageBox
                msgBox = b(c.frame.top)
                msgBox.setWindowTitle('Error: Directory not empty')
                msgBox.setText('Please select or create an empty directory.')
                msgBox.setIcon(b.Warning)
                msgBox.addButton(QtWidgets.QPushButton('Select another...'), b.YesRole)
                msgBox.addButton(QtWidgets.QPushButton('Cancel'), b.NoRole)
                ret = msgBox.exec_()
                if ret == 0:  continue
                elif ret== 1:  break
            g.redirectStderr() # Redirect stderr to the current log pane.
            g.redirectStdout() # Redirect stdout to the current log pane.
            try:
                git.clone(url, target, bare=False, checkout=None, outstream=sys.stdout)
            except GitProtocolError :
                g.es('Erreur')
            g.restoreStderr()  # Restores stderr so it prints to the console window.
            g.restoreStdout()
</t>
<t tx="davy.20141223204341.11">#@g.command('git-add')
#def add(event):
def add():
    """        
def add(repo='.', paths=None):
Add files to the staging area.
Parameters	repo	Repository for the files
paths	Paths to add. No value passed stages all modified files.
    """    
    dialog = FileDialog(None,'test')
    dialog.exec_() 
    myFiles = dialog.filesSelected()
    dialog.close()    
    g.es(myFiles)</t>
<t tx="davy.20141223204341.12">#@g.command('git-rm')
#def rm(event):
def rm():   
    """
    def rm(repo='.', paths=None):
Remove files from the staging area.
Parameters	repo	Repository for the files
	paths	Paths to remove
    """     
    pass    
    
</t>
<t tx="davy.20141223204341.13">@
@g.command('git-push')
def commit(event):           
           #

 def pull(repo, remote_location, refs_path, outstream=sys.stdout, errstream=sys.stderr):
Pull from remote via dulwich.client
Parameters	repo	Path to repository
	remote_location	Location of the remote
	refs_path	relative path to the fetched refs
	outstream	A stream file to write to output
	errstream	A stream file to write to errors</t>
<t tx="davy.20141223204341.14">@
@g.command('git-push')
def commit(event):           
           #

 def push(repo, remote_location, refs_path, outstream=sys.stdout, errstream=sys.stderr):
Remote push with dulwich via dulwich.client
Parameters	repo	Path to repository
	remote_location	Location of the remote
	refs_path	relative path to the refs to push to remote
	outstream	A stream file to write output
	errstream	A stream file to write errors </t>
<t tx="davy.20141223204341.15">@
 def tag(repo, tag, author=None, message=None, annotated=False, objectish='HEAD', tag_time=None, tag_timezone=None):
Creates a tag in git via dulwich calls:
Parameters	repo	Path to repository
	tag	tag string
	author	tag author (optional, if annotated is set)
	message	tag message (optional)
	annotated	whether to create an annotated tag
	objectish	object the tag should point at, defaults to HEAD
	tag_time	Optional time for annotated tag
	tag_timezone	Optional timezone for annotated tag</t>
<t tx="davy.20141223204341.16">@
 def archive(location, committish=None, outstream=sys.stdout, errstream=sys.stderr):
Create an archive.
Parameters	location	Location of repository for which to generate an archive.
	committish	Commit SHA1 or ref to use
	outstream	Output stream (defaults to stdout)
	errstream	Error stream (defaults to stderr)</t>
<t tx="davy.20141223204341.17">@
 def symbolic_ref(repo, ref_name, force=False):
Set git symbolic ref into HEAD.
Parameters	repo	path to the repository
	ref_name	short name of the new ref
	force	force settings without checking if it exists in refs/heads</t>
<t tx="davy.20141223204341.18">@
 def reset(repo, mode, committish='HEAD'):
Reset current HEAD to the specified state.
Parameters	repo	Path to repository
	mode	Mode ("hard", "soft", "mixed")</t>
<t tx="davy.20141223204341.19">@
@g.command('git-commit')
def commit(event):
           title = 'Commit changes'
           message =  """
Hopefully it will be possible to diplay modifyed files
no problem
Enter a commit message:"""

           cancelButtonText='Cancel'
           okButtonText='Commit'
           commitMessage = g.app.gui.runAskOkCancelStringDialog(c,title,message,cancelButtonText,
           okButtonText)
           g.es(commitMessage)
    


 def commit(repo='.', message=None, author=None, committer=None):
Create a new commit.
Parameters	repo	Path to repository
	message	Optional commit message
	author	Optional author name and email
	committer	Optional committer name and email
Returns	SHA1 of the new commit</t>
<t tx="davy.20141223204341.2">@language python
@tabwidth -4
&lt;&lt; docstring &gt;&gt;
&lt;&lt; import &gt;&gt;
&lt;&lt; params &gt;&gt;

@others

git = leoGit()
git.createCommands()
@
git.createCommands()
git.createMenu()</t>
<t tx="davy.20141223204341.20">@
def commit_tree(repo, tree, message=None, author=None, committer=None):
Create a new commit object.
Parameters	repo	Path to repository
	tree	An existing tree object
	author	Optional author name and email
	committer	Optional committer name and email</t>
<t tx="davy.20141223204341.21">@
Todo : how to out to logpane

 def print_commit(commit, outstream):
Write a human-readable commit log entry.
Parameters	commit	A Commit object
	outstream	A stream file to write to
def print_tag(tag, outstream):
Write a human-readable tag.
Parameters	tag	A Tag object
	outstream	A stream to write to
def show_blob(repo, blob, outstream):
Write a blob to a stream.
Parameters	repo	A Repo object
	blob	A Blob object
	outstream	A stream file to write to
def show_commit(repo, commit, outstream):
Show a commit to a stream.
Parameters	repo	A Repo object
	commit	A Commit object
	outstream	Stream to write to
def show_tree(repo, tree, outstream):
Print a tree to a stream.
Parameters	repo	A Repo object
	tree	A Tree object
	outstream	Stream to write to
def show_tag(repo, tag, outstream):
Print a tag to a stream.
Parameters	repo	A Repo object
	tag	A Tag object
	outstream	Stream to write to
def show_object(repo, obj, outstream):
Undocumented
def log(repo='.', outstream=sys.stdout, max_entries=None):
Write commit logs.
Parameters	repo	Path to repository
	outstream	Stream to write log output to
	max_entries	Optional maximum number of entries to display
def show(repo='.', objects=None, outstream=sys.stdout):
Print the changes in a commit.
Parameters	repo	Path to repository
	objects	Objects to show (defaults to [HEAD])
	outstream	Stream to write to
def diff_tree(repo, old_tree, new_tree, outstream=sys.stdout):
Compares the content and mode of blobs found via two tree objects.
Parameters	repo	Path to repository
	old_tree	Id of old tree
	new_tree	Id of new tree
	outstream	Stream to write to
def rev_list(repo, commits, outstream=sys.stdout):
Lists commit objects in reverse chronological order.
Parameters	repo	Path to repository
	commits	Commits over which to iterate
	outstream	Stream to write to
    
 def list_tags(repo, outstream=sys.stdout):
List all tags.
Parameters	repo	Path to repository
	outstream	Stream to write tags to
    
    
 def status(repo):
Returns staged, unstaged, and untracked changes relative to the HEAD.
Parameters	repo	Path to repository
Returns	GitStatus tuple, staged - list of staged paths (diff index/HEAD) unstaged - list of unstaged paths (diff index/working-tree) untracked - list of untracked, un-ignored &amp; non-.git paths

 def get_tree_changes(repo):
Return add/delete/modify changes to tree by comparing index to HEAD.
Parameters	repo	repo path or object
Returns	dict with lists for each type of change</t>
<t tx="davy.20141223204341.22">@
import os
import sys
from  leo.core.leoQt import QtWidgets
from dulwich import porcelain as git
from dulwich.errors import GitProtocolError

def onDirEntered(directory):
        if not os.getenv('HOME') in directory:
            dialog.setDirectory(os.getenv('HOME'))

dialog = QtWidgets.QFileDialog(None, 'Select a directory')
dialog.setDirectory(os.getenv('HOME'))
dialog.setFileMode(QtWidgets.QFileDialog.Directory)
dialog.directoryEntered.connect(onDirEntered)
# Try with and without this option :
dialog.setOption(QtWidgets.QFileDialog.DontUseNativeDialog)
dialog.setWindowIcon(g.app.gui.appIcon)
dialog.exec_()


</t>
<t tx="davy.20141223204341.23">@
def createMenu(self):
        pass</t>
<t tx="davy.20141223204341.24"></t>
<t tx="davy.20141223204341.25">class FileDialog(QtWidgets.QFileDialog):
        def __init__(self, *args):
            QtWidgets.QFileDialog.__init__(self, *args)
            self.setOption(self.DontUseNativeDialog, True)
            self.setFileMode(self.ExistingFiles)
            btns = self.findChildren(QtWidgets.QPushButton)
            self.openBtn = [x for x in btns if 'open' in str(x.text()).lower()][0]
            self.openBtn.clicked.disconnect()
            self.openBtn.clicked.connect(self.openClicked)
            self.tree = self.findChild(QtWidgets.QTreeView)
    
        def openClicked(self):
            inds = self.tree.selectionModel().selectedIndexes()
            files = []
            for i in inds:
                if i.column() == 0:
                    files.append(os.path.join(self.directory().absolutePath(),str(i.data())))
            self.selectedFiles = files
            self.hide()
            
        def filesSelected(self):
            return self.selectedFiles</t>
<t tx="davy.20141223204341.27">TODO</t>
<t tx="davy.20141223204341.28"></t>
<t tx="davy.20141223204341.3">"""
Description
-----------------

"""</t>
<t tx="davy.20141223204341.33"></t>
<t tx="davy.20141223204341.34">gnx: davy.20141213005428.560
</t>
<t tx="davy.20141223204341.36"></t>
<t tx="davy.20141223204341.4">import leo.core.leoGlobals as g
from  leo.core.leoQt import QtWidgets
from dulwich.client import TCPGitClient
from dulwich import porcelain as git
from dulwich.errors import GitProtocolError,NotGitRepository
#from dulwich import log_utils
#log_utils.default_logging_config()
import os
import sys

repo='/home/davy'</t>
<t tx="davy.20141223204341.5"></t>
<t tx="davy.20141223204341.6">class leoGit():
    @others
</t>
<t tx="davy.20141223204341.7">def createCommands(self):
    @others
    repo='/home/davy'
    add()</t>
<t tx="davy.20141223204341.8">#@g.command('git-init')
#def init(event):
def init():    
    """Create a new repository into an empty folder"""
    while True: 
        path=QtWidgets.QFileDialog.getExistingDirectory (c.frame.top,
                                                                                            caption='Choose an empty directory',
                                                                                            #directory='.'
                                                                                            )
        # Do we want no .git or empty dir ?
        # if not '.git' in os.listdir(path): 
        if not os.listdir(path): 
            repo = git.init(path)
            return repo
        else:
            b=QtWidgets.QMessageBox
            msgBox = b(c.frame.top)
            msgBox.setWindowTitle('Error: Directory not empty')
            msgBox.setText('Please select or create an empty directory.')
            msgBox.setIcon(b.Warning)
            msgBox.addButton(QtWidgets.QPushButton('Select another...'), b.YesRole)
            msgBox.addButton(QtWidgets.QPushButton('Cancel'), b.NoRole)
            ret = msgBox.exec_()
            if ret == 0:  continue
            elif ret== 1:  break</t>
<t tx="davy.20141223204341.9">#@g.command('git-open-repo')
#def open_repo(even):
def open_repo():
    """Create a new repository into an empty folder"""
    while True: 
        path=QtWidgets.QFileDialog.getExistingDirectory (c.frame.top,
                                                                                            caption='Choose a repository',
                                                                                            #directory='.'
                                                                                            )
        try :
            repo=git.open_repo(path)
            return repo
        except NotGitRepository:
            b=QtWidgets.QMessageBox
            msgBox = b(c.frame.top)
            msgBox.setWindowTitle('Error: Directory is not a Git repository')
            msgBox.setText('Please select an existing Git repository.')
            msgBox.setIcon(b.Warning)
            msgBox.addButton(QtWidgets.QPushButton('Select another...'), b.YesRole)
            msgBox.addButton(QtWidgets.QPushButton('Cancel'), b.NoRole)
            ret = msgBox.exec_()
            if ret == 0:  continue
            elif ret== 1:  break</t>
<t tx="ekr.20040630210818">HTML Editing in Leo is soooo much easier then with NoNodeEditors. Ive
had a blast working on a web page. Usually I had to look at a bunch of
gunk all at once. Now I can look at little pieces of gunk! :) 

-Anon (for now)

Before leo, I try to avoid or refactor long functions. With leo, I am
very tempted not to. Being able to view and slice my code at a higher
level in pretty much anyway I want, I feel like a commanding master in
my own mess...Leo lets me be lazy and get away with it. ;)

Mark Ng

[Quote] I have just finished a little embedded system for someone, written in
C using leo as the editor. I told the customer he _had_ to use leo for
ongoing maintenance, after I looked at one of the main state machines:
600 lines in the derived file, but trivialy easy to get your head
around in Leo...

The good news is that having been forced to meet leo he thinks it'll
solve many other problems that his company has with code maintenance.
Another step to world domination!

Leo allows you to do things that you'd never consider with another editor. 

BTW: in a real-time embedded system like I was working on, not having
the overhead of a function call (which you'd have had if you'd split
the case statement as you would with a normal editor) saves time, and
makes the system more flexible...
[End Quote]</t>
<t tx="ekr.20040828084148">Leo is the best IDE that I have had the pleasure to use. I have been using it
now for about 2 -- 3 months. It has totally changed not only the way that I
program, but also the way that I store and organise all of the information that
I need for the job that I do. -- Ian Mulvany</t>
<t tx="ekr.20060213160806">"Thanks for a wonderful program – everybody should be using it! It blows the
socks off that Java Mind mapping software that won project of the month a while
back on sourceforge!" -- Derick van Niekerk.
</t>
<t tx="ekr.20060823090437">Thanks for creating the most useful and amazing application that
I've come across in years. I use Leo every day.</t>
<t tx="ekr.20070101093904">Leo is THE BEST THING to ever had happened to me. I've done in two
weeks what would have taken me years (not exaggerating!). Thanks Ed
for a terrific tool!!!!
 
Julian S. Fecteau 
</t>
<t tx="ekr.20070325123540"></t>
<t tx="ekr.20070425092712">Leo--especially with its feature of user-controllable outlining and
overview __has for the last 4-5 years had the greatest positive effect
on my overall programming quality of life than anything else out there
in the software world (apart maybe from the Python language itself,
and those who contribute Python modules to the world). -- David McNab
</t>
<t tx="ekr.20080901114425.2">For me Squeak and Leo have been two of the most significant technologies to
redefine my personal computer experience and the ideas behind computing.</t>
<t tx="ekr.20100202061222.1494">@language rest

Pre-testing:
    - Make sure Leo looks good without myLeoSettings.leo.
    - Run the "check-bindings" button in leoSettings.leo.
    - Run all unit tests.
    - Run pylint -a.
Release notes and web documentation:
    - Update the release notes.
    - Remove @language rest where possible in new notes.
    - Create new "what's new" section.
    - Copy release notes to leoDist.leo.
    - Update version number and modification date on Leo's home page.
    - (The sphinx date is updated automatically.)
    - Regenerate all .html files.
    - Copy files to web.
leoVersion.py
    - Update version constant.
LeoDocs.leo:
    - Update version numbers in html/conf.py
    - Remove top-level clones.
    - Select the readme node.
LeoPluginsRef.leo:
    - Remove top-level clones.
Post-testing:
    - Run all unit tests.
LeoDist.leo:
    - Make sure copyright dates are correct.
        - leoDist.leo and leoDocs.leo.
    - Update version numbers: search leoDist.leo for ##version.
    - Update readme.txt.
    - Check readme.txt spelling.
    - Check 'PKG-INFO.TXT'
Run make-leo.
    ***** Commit all files before running make-leo.
    - Run make-leo button in leoDist.leo.
    - Commit any changed files.
Create the executable installer:
    - Double-click leo.nsi.
Test files in installed folder.
    - Run all unit tests in the installed folder, with the installed Leo.
    - Make sure the following open without errors:
        - leoPlugins.leo
        - leoPy.leo
        - LeoDocs.leo
Create a git tag **last**.

===== Scan all folders &amp; files before uploading.

Create Release on SourceForge: http://sourceforge.net/projects/leo/

Announcements
- Update version number on Leo's wikipedia site:
    http://en.wikipedia.org/wiki/Leo_(editor)
    - Edit with the 'Edit this page' *tab* (not a link)
- Update version number on web site.
- Announce to leo-editor.
- Announce to SourceForge:  http://sourceforge.net/projects/leo/
- Announce to comp.lang.python.announce:
    https://groups.google.com/forum/#!forum/comp.lang.python.announce
- Register Leo at http://www.python.org/pypi?:action=submit_form
- Twitter
- My blog</t>
<t tx="ekr.20101115090518.1494">Leo 4.8 final                               November 26, 2010

Leo 4.8 final is now available at:
http://sourceforge.net/projects/leo/files/

Leo is a text editor, data organizer, project manager and much more. See:
http://leoeditor.com/

The highlights of Leo 4.8:
--------------------------

- Leo now uses the simplest possible sentinel lines in external files.
  External files with sentinels now look like Emacs org-mode files.
- Leo Qt gui now supports Drag and Drop.
  This was one of the most frequently requested features.
- Improved abbreviation commands.
  You now define abbreviations in Leo settings nodes, not external files.
- @url nodes may contain url's in body text.
  This allows headlines to contain summaries: very useful.
- Leo now uses PyEnchant to check spelling.
- Leo can now open multiple files from the command line.
- Leo's ancient Tangle and Untangle commands are now deprecated.
  This will help newbies how to learn Leo.
- Leo now shows "Resurrected" and "Recovered" nodes.
  These protect data and show how data have changed.
  These fix several long-standing data-related problems.
- A new "screenshots" plugin for creating slide shows with Leo.
  I used this plugin to create Leo's introductory slide shows.
- Improved autocompletion: Ctrl-space starts a one-time completion.
- A better installer.
- Many bug fixes.

Links:
------
Leo:      http://leoeditor.com/
Forum:    http://groups.google.com/group/leo-editor
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
Bzr:      http://code.launchpad.net/leo-editor/
Quotes:   http://leoeditor.com/testimonials.html
</t>
<t tx="ekr.20110603112852.1505">Leo 4.9 final              June 21, 2011

Leo 4.9 final is now available at:
http://sourceforge.net/projects/leo/files/

Leo is a text editor, data organizer, project manager and much more.
See: http://leoeditor.com/

The highlights of Leo 4.9:
--------------------------

- The Qt gui completely replaces the Tk gui--Qt gui now has all essential
  features of Tk, including plugins.

- Completed Leo's autocompleter.

- The rendering pane can now display movies, html, svg images, etc.

- The scrolledmessage plugin can now use the rendering pane.

- Nodes may contain multiple @language directives.

- Leo highlights URL's everywhere. Ctrl-click URL's opens them in your web
  browser. 

- Leo uses an @file node's extension by default if there is no @language
  directive in effect.
  
- Unified extract and import commands.

- Leo can now colorize multiple @language directives in a single node.

- Plain up/down arrow keys in headline-editing mode select a new node.

- New commands to insert, delete, change or print uA's.

- Added namespace directive to .leo files.

- Fixed many bugs, some important, most quite minor.

Links:
------
Leo:      http://leoeditor.com/
Forum:    http://groups.google.com/group/leo-editor
Download: http://sourceforge.net/projects/leo/files/
Bzr:      http://code.launchpad.net/leo-editor/
Quotes:   http://leoeditor.com/testimonials.html
</t>
<t tx="ekr.20120328150744.1791">Leo 4.10 final                                         March 29, 2012

Leo 4.10 final is now available at: http://sourceforge.net/projects/leo/files/

Leo is a text editor, data organizer, project manager and much more.
http://leoeditor.com/

Leo 4.10 contains 9 months of intense work on Leo. Several very important
features are subtle; you could almost call them Easter Eggs, so please read
the following notes carefully.

The highlights of Leo 4.10:
--------------------------

* Dozens of new and improved features and commands, including...
  - Tab completion now shows all @command &amp; @button nodes.
  - Leo tabs may be detached from the main window.
  - The Open With menu now works.
  - The leoInspect module answers questions about Python code.
  - Leo can highlight the pane containing the focus.
  - The bigdash plugin searches across multiple files.
  - Improved abbreviation capabilities.
  - Improved handling of URL's.
  - Improved editing of non-Leo files.
  - Improvements create "weightless" unit testing.
  - Improved Leo's home page.
* Easier installation on MacOS.
* Fixed almost 70 bugs.

The Easter Eggs
---------------

1. Tab completion now shows all @command &amp; @button nodes.

Put all your common scripts in @command nodes in myLeoSettings.leo.
Typing &lt;Alt-X&gt;@c&lt;Tab&gt; will remind you of the names of these scripts.
You can execute the scripts by name without the "@command-" prefix.

2. Improved abbreviation capabilities.

Virtually any kind of abbreviation is possible. For example, ~a to ã.

3. Improved handling of URL's.

URL's can be used as links to other Leo outlines.

4 Weightless unit testing.

The mantra is edit, alt-4 (run-marked-unit-tests-externally), edit,
alt-4,... Several seemingly innocuous changes made this work without
"friction". The result is a remarkable increase in productivity.

Links:
------
Leo:      http://leoeditor.com/
Forum:    http://groups.google.com/group/leo-editor
Download: http://sourceforge.net/projects/leo/files/
Bzr:      http://code.launchpad.net/leo-editor/
Quotes:   http://leoeditor.com/testimonials.html
</t>
<t tx="ekr.20130809141000.1990">@language rest
</t>
<t tx="ekr.20130809141000.1991">System requirements
-------------------

Leo requires the `Python`_ and `PyQt_` package.
The `PyEnchant`_ package is optional. 

**Python**: Leo will work on any platform that supports Python 2.6 or
above, including Python 3.0 and above. To install Python, see
http://python.org.

**PyQt**: PyQt provides Leo's widgets. To install PyQt, get the binary
package from: http://www.riverbankcomputing.co.uk/software/pyqt/download
The PyQt version must match your installed Python version. Remember that
Leo requires Python 2.6 or later, or Python 3.0 or later. Now run the
binary PyQt installer.

**PyEnchant**: You must install the PyEnchant package if you want to use
Leo's Spell tab. Download and install the PyEnchant package from
http://pythonhosted.org/pyenchant/download.html There is an executable
installer for Windows users.

</t>
<t tx="ekr.20130809141000.1992">
Leo's HOME directory
--------------------

Python's HOME environment variable specifies Leo's HOME directory.
See http://docs.python.org/lib/os-procinfo.html for details.

Leo puts several files in your HOME/.leo directory:
.leoID.txt, .leoRecentFiles.txt, and myLeoSettings.leo.
There are various fallback directories if there is no home directory.
</t>
<t tx="ekr.20130809141000.1993">
Installing Leo on Linux
-----------------------

You may download Leo's sources in one of three ways, as described at:
http://leoeditor.com/download.html If the sources are zipped, unzip them
into a folder in your home directory, say ~/leo-5.0.

You now have two choices:

1. You can run Leo from your home directory. Just add  ~/leo-5.0 to your path.

2. You can install leo into /usr/local/lib and /usr/local/bin as follows::

    cd ~/leo-5.0
    sudo python setup.py install

See `Running Leo`_ for how to run Leo after installing it.
</t>
<t tx="ekr.20130809141000.1994">
Installing Leo on Windows
--------------------------

Install Python and Qt, as described above.

Now you have a choice.  You can use Leo's binary (single-click) installer
or download Leo's sources directly.

1. Using the single-click installer

Leo has a binary installer for Windows, available at
http://sourceforge.net/projects/leo/files/Leo/ The binary installer
installs Leo and sets Windows file associations.

2. Installing from sources

You may download Leo's sources in one of three ways, as described at:
http://leoeditor.com/download.html If the sources are zipped, unpack them
into a temp folder. You may place the sources anywhere you like, including
Python's *site-packages* folder, for example,
C:\Python26\Lib\site-packages.

</t>
<t tx="ekr.20130809141000.1995">
Running Leo
-----------

You can run Leo from a Python interpreter as follows::

    import leo
    leo.run() # runs Leo, opening a new outline or,
    leo.run(fileName=aFileName) # runs Leo, opening the given file name.

Another way to run Leo is as follows::

    cd &lt;path-to-launchLeo.py&gt;
    python launchLeo.py
</t>
<t tx="ekr.20130809141000.1996">
Creating File Associations
--------------------------

**Linux**

The following shell script will allow you to open foo.leo files by typing leo foo::

    #!/bin/sh 
    python &lt;leopath&gt;launchLeo.py $1

where &lt;leopath&gt; is the path to the directory *containing* the leo directory. 

**Windows**

*Important*: Leo's binary Windows installer sets file associations
automatically, so this section is needed only if you are installing Leo
from a .zip file or other sources.

There are two ways of associating .leo files with Leo. The first uses the
Windows control panel, the second, the Windows console.

**Method 1: Using the Windows Control Panel**

The goal is that you want to associate .leo files with the following command::

    "&lt;path to python&gt;\python.exe" "&lt;path to launchLeo.py&gt;\launchLeo.py" "%1"
    
Before Windows 7, you do this with using the Folder Options control panel.
In Windows 7, you do this with the Default Programs control panel.

*Note*: "%1" passes just the file being clicked on, quoted for spaces etc.
The quotation marks are needed to handle file paths containing spaces.

*Warning:* In a batch file, %1 passes just the first command line parameter.
It is logical to expect %* to work for file associations just as in batch
files. Alas, it does not.

**Method 2: Using the Windows Console**

Open a Windows console with administrator privileges, then type::

    ftype LeoFile="&lt;path to python&gt;\pythonw.exe" "&lt;path to launchLeo.py&gt;\launchLeo.py" "%1" %*
    assoc .leo=LeoFile

And put this leo.bat in %PATH%::

    @start /b "Leo" "&lt;path to python&gt;\python.exe" "&lt;path to launchLeo.py&gt;\launchLeo.py" %*
    
You may omit the /b option if you want to create a separate console window for Leo.
</t>
<t tx="ekr.20130809141000.1997">
Adding Leo to Your Path
-----------------------

After you have installed Leo, you should add the location of your leo/core folder to your python path.
One way to do this is adding something like the following to python/Lib/sitecustomize.py:

    import sys
    sys.path.append(r'&lt;path-to-leo&gt;leo\core')

Another way is to append &lt;path-to-leo&gt; to the Windows PYTHONPATH environment variable.
</t>
<t tx="ekr.20130809141000.1998">
Running Leo for the first time
------------------------------

The first time you start Leo, a dialog will ask you for a unique identifier. If
you are using cvs, use your cvs login name. Otherwise your initials will do. Leo
stores this identifier in the file ``.leoID.txt``. Leo attempts to create
``leoID.txt`` in the .leo sub-directory of your home directory, then in Leo's config directory, and
finally in Leo's core directory. You can change this identifier at any time by
editing ``.leoID.txt``.
</t>
<t tx="ekr.20131105110107.16636">Leo 4.11 final released: Python scripting IDE

Leo 4.11 final is now available at: http://sourceforge.net/projects/leo/files/Leo/
Leo 4.11 contains over a year's work on Leo.

Leo is a PIM, an IDE and an outliner for programmers, authors and web
designers. Leo's unique features organize data in a revolutionary way.
Python scripts can easily access all parts of Leo outlines.
See http://leoeditor.com/tutorial.html

The highlights of Leo 4.11:
---------------------------

- Leo's tutorials have been rewritten and simplified.
- Greatly improved abbreviations, including templates.
- Clones are now valid anywhere in @file nodes.
- Leo now warns if a .leo file is open elsewhere.
- Leo's IPython bridge now works with IPython 1.x.
- Added support for @testsetup and @testclass.
- Added support for sessions.
- Added colorizing themes.
- A colored border highlights the pane with focus.
- Added support for the clojure, markdown and TypeScript languages.
- Added importers for .ipynb, .otl and vimoutliner files.
- Many new and improved commands, plugins and scripts.
- Dozens of bug fixes and code-level improvements.

Links:
------
Leo:       http://leoeditor.com
Docs:      http://leoeditor.com/leo_toc.html
Tutorials: http://leoeditor.com/tutorial.html
Forum:     http://groups.google.com/group/leo-editor
Download:  http://sourceforge.net/projects/leo/files/
Bzr:       http://code.launchpad.net/leo-editor/
Quotes:    http://leoeditor.com/testimonials.html
</t>
<t tx="ekr.20141016105045.2119"># .gitattributes file for Leo distribution

# Commit this file after changing it!

.gitattributes                  export-ignore
.gitignore                      export-ignore
nsi.log.txt                     export-ignore

git-manifest.txt                export-ignore
MakeFile                        export-ignore
MANIFEST.in                     export-ignore

leoStandAloneGlobals.py         export-ignore
stand_alone_globals.leo         export-ignore
# setup.cfg                     export-ignore
# setup.py                      export-ignore

leo/core/leoPy.leo              export-ignore
leo/core/ekrLeoPy.leo           export-ignore
leo/test/unittest/.leo_shadow/  export-ignore
</t>
<t tx="ekr.20141105082156.2">Leo 5.0 final                       November 24, 2014

Leo 5.0-final is now available at:
http://sourceforge.net/projects/leo/files/Leo/

This release fixes several installation issues
and updates installation instructions for Linux/Ubuntu.

Leo is a PIM, an IDE and an outliner.
Video tutorials: http://leoeditor.com/screencasts.html
Text tutorials: http://leoeditor.com/tutorial.html

The highlights of Leo 5.0
--------------------------

* Better compatibility with vim, Emacs, pylint and PyQt:
    - Optional native emulation of vim commands.
    - Full support for Emacs org-mode outlines.
    - Full support for Vim .otl outlines.
    - Better support for pylint.
    - Support for both PyQt4 and PyQt5.
* Smoother installation:
    - Support for brew install leo on MacOS.
    - 'python setup.py install' now works.
    - pip install leo now works.
    - Leo is now a debian package.
* Better handling of nodes containing large text:
    - Idle time syntax coloring eliminates delay.
    - Optional delayed loading of large text.
* Power features:
    - Command history for minibuffer commands.
    - Leo available via github repository.
    - File name completion.
    - Cloned nodes expand and contract independently.
    - @data nodes can be composed from descendant nodes.
    - No need to change Leo's main style sheet:
      it can be customized with @color and @font settings.
    - @persistence nodes save data in @auto trees.
    - A pluggable architecture for @auto nodes.
    - The style-reload command changes Leo's appearance instantly.
* Important new plugins for tagging, display and node evaluation.
* For beginners:
    - Leo's default workbook files contains Leo's quickstart guide.
* Hundreds of new/improved features and bug fixes.

Links:
------
Leo:       http://leoeditor.com
Docs:      http://leoeditor.com/leo_toc.html
Tutorials: http://leoeditor.com/tutorial.html
Videos:    http://leoeditor.com/screencasts.html
Forum:     http://groups.google.com/group/leo-editor
Download:  http://sourceforge.net/projects/leo/files/
Github:    https://github.com/leo-editor/leo-editor
Quotes:    http://leoeditor.com/testimonials.html
</t>
<t tx="ekr.20141117135127.2"></t>
</tnodes>
</leo_file>
